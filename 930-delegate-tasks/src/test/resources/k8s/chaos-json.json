{
  "skipDryRun": false,
  "releaseName": "",
  "commandName": "K8s Apply",
  "commandType": "APPLY",
  "timeoutIntervalInMin": 5,
  "accountId": "kmpySmUISimoRrJL6NL73w",
  "skipSteadyStateCheck": false,
  "useLatestKustomizeVersion": false,
  "useNewKubectlVersion": true,
  "useLatestChartMuseumVersion": true,
  "k8sDelegateManifestConfig": {
    "manifestStoreTypes": "Local",
    "manifestFiles": [
      {
        "fileName": "manifest.yaml",
        "fileContent": "---\\r\\napiVersion: v1\\r\\nkind: ServiceAccount\\r\\nmetadata:\\r\\n name: litmus\\r\\n namespace: a1\\r\\n\\r\\n---\\r\\napiVersion: apps\\/v1\\r\\nkind: Deployment\\r\\nmetadata:\\r\\n labels:\\r\\n app.kubernetes.io\\/name: litmus\\r\\n # provide unique instance-id if applicable\\r\\n # app.kubernetes.io\\/instance: litmus-abcxzy\\r\\n app.kubernetes.io\\/version: v2.0.0\\r\\n app.kubernetes.io\\/component: operator\\r\\n app.kubernetes.io\\/part-of: litmus\\r\\n app.kubernetes.io\\/managed-by: kubectl\\r\\n name: chaos-operator-ce\\r\\n namespace: a1\\r\\nspec:\\r\\n replicas: 1\\r\\n selector:\\r\\n matchLabels:\\r\\n name: chaos-operator\\r\\n template:\\r\\n metadata:\\r\\n labels:\\r\\n app.kubernetes.io\\/name: litmus\\r\\n # provide unique instance-id if applicable\\r\\n # app.kubernetes.io\\/instance: litmus-abcxzy\\r\\n app.kubernetes.io\\/version: latest\\r\\n app.kubernetes.io\\/component: operator\\r\\n app.kubernetes.io\\/part-of: litmus\\r\\n app.kubernetes.io\\/managed-by: kubectl\\r\\n name: chaos-operator\\r\\n spec:\\r\\n serviceAccountName: litmus-namespace-scope\\r\\n \\r\\n #{nodeselector}\\r\\n containers:\\r\\n - name: chaos-operator\\r\\n image: litmuschaos\\/chaos-operator:2.8.0\\r\\n securityContext:\\r\\n runAsUser: 2000\\r\\n allowPrivilegeEscalation: false\\r\\n resources:\\r\\n limits:\\r\\n cpu: 150m\\r\\n memory: 250Mi\\r\\n command:\\r\\n - chaos-operator\\r\\n imagePullPolicy: Always\\r\\n env:\\r\\n - name: CHAOS_RUNNER_IMAGE\\r\\n value: litmuschaos\\/chaos-runner:2.8.0\\r\\n - name: WATCH_NAMESPACE\\r\\n valueFrom:\\r\\n fieldRef:\\r\\n fieldPath: metadata.namespace\\r\\n - name: POD_NAME\\r\\n valueFrom:\\r\\n fieldRef:\\r\\n fieldPath: metadata.name\\r\\n - name: OPERATOR_NAME\\r\\n value: 'chaos-operator'\\r\\n - name: POD_NAMESPACE\\r\\n valueFrom:\\r\\n fieldRef:\\r\\n fieldPath: metadata.namespace\\r\\n resources:\\r\\n requests:\\r\\n memory: \\\"300Mi\\\"\\r\\n cpu: \\\"125m\\\"\\r\\n ephemeral-storage: \\\"500Mi\\\"\\r\\n limits:\\r\\n memory: \\\"500Mi\\\"\\r\\n cpu: \\\"225m\\\"\\r\\n ephemeral-storage: \\\"1Gi\\\"\\r\\n---\\r\\napiVersion: apps\\/v1\\r\\nkind: Deployment\\r\\nmetadata:\\r\\n labels:\\r\\n app: chaos-exporter\\r\\n release: prometheus-stack\\r\\n name: chaos-exporter\\r\\n namespace: a1\\r\\nspec:\\r\\n replicas: 1\\r\\n selector:\\r\\n matchLabels:\\r\\n app: chaos-exporter\\r\\n template:\\r\\n metadata:\\r\\n labels:\\r\\n app: chaos-exporter\\r\\n release: prometheus-stack\\r\\n spec:\\r\\n \\r\\n #{nodeselector}\\r\\n containers:\\r\\n - image: litmuschaos\\/chaos-exporter:2.8.0\\r\\n imagePullPolicy: Always\\r\\n name: chaos-exporter\\r\\n securityContext:\\r\\n runAsUser: 2000\\r\\n allowPrivilegeEscalation: false\\r\\n ports:\\r\\n - containerPort: 8080\\r\\n name: tcp\\r\\n env:\\r\\n - name: TSDB_SCRAPE_INTERVAL\\r\\n value: '10'\\r\\n - name: WATCH_NAMESPACE\\r\\n value: a1\\r\\n resources:\\r\\n requests:\\r\\n memory: \\\"300Mi\\\"\\r\\n cpu: \\\"125m\\\"\\r\\n ephemeral-storage: \\\"500Mi\\\"\\r\\n limits:\\r\\n memory: \\\"500Mi\\\"\\r\\n cpu: \\\"225m\\\"\\r\\n ephemeral-storage: \\\"1Gi\\\"\\r\\n serviceAccountName: litmus-namespace-scope\\r\\n---\\r\\napiVersion: v1\\r\\nkind: Service\\r\\nmetadata:\\r\\n labels:\\r\\n app: chaos-exporter\\r\\n name: chaos-exporter\\r\\n namespace: a1\\r\\nspec:\\r\\n ports:\\r\\n - port: 8080\\r\\n name: tcp\\r\\n protocol: TCP\\r\\n targetPort: 8080\\r\\n selector:\\r\\n app: chaos-exporter\\r\\n type: ClusterIP\\r\\n---\\r\\napiVersion: v1\\r\\nkind: ServiceAccount\\r\\nmetadata:\\r\\n name: argo\\r\\n namespace: a1\\r\\n---\\r\\napiVersion: rbac.authorization.k8s.io\\/v1\\r\\nkind: Role\\r\\nmetadata:\\r\\n name: argo-role\\r\\n namespace: a1\\r\\nrules:\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"pods\\\", \\\"pods\\/exec\\\"]\\r\\n verbs: [\\\"create\\\", \\\"get\\\", \\\"list\\\", \\\"watch\\\", \\\"update\\\", \\\"patch\\\", \\\"delete\\\"]\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"configmaps\\\"]\\r\\n verbs: [\\\"get\\\", \\\"watch\\\", \\\"list\\\"]\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"persistentvolumeclaims\\\"]\\r\\n verbs: [\\\"create\\\", \\\"delete\\\"]\\r\\n - apiGroups: [\\\"argoproj.io\\\"]\\r\\n resources: [\\\"workflows\\\", \\\"workflows\\/finalizers\\\"]\\r\\n verbs: [\\\"get\\\", \\\"list\\\", \\\"watch\\\", \\\"update\\\", \\\"patch\\\", \\\"delete\\\", \\\"create\\\"]\\r\\n - apiGroups: [\\\"argoproj.io\\\"]\\r\\n resources: [\\\"workflowtemplates\\\", \\\"workflowtemplates\\/finalizers\\\", \\\"workflowtasksets\\\"]\\r\\n verbs: [\\\"get\\\", \\\"list\\\", \\\"watch\\\"]\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"serviceaccounts\\\"]\\r\\n verbs: [\\\"get\\\", \\\"list\\\"]\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"secrets\\\"]\\r\\n verbs: [\\\"get\\\"]\\r\\n - apiGroups: [\\\"argoproj.io\\\"]\\r\\n resources: [\\\"cronworkflows\\\", \\\"cronworkflows\\/finalizers\\\"]\\r\\n verbs: [\\\"get\\\", \\\"list\\\", \\\"watch\\\", \\\"update\\\", \\\"patch\\\", \\\"delete\\\"]\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"events\\\"]\\r\\n verbs: [\\\"create\\\", \\\"patch\\\"]\\r\\n - apiGroups: [\\\"policy\\\"]\\r\\n resources: [\\\"poddisruptionbudgets\\\"]\\r\\n verbs: [\\\"create\\\", \\\"get\\\", \\\"delete\\\"]\\r\\n---\\r\\napiVersion: rbac.authorization.k8s.io\\/v1\\r\\nkind: RoleBinding\\r\\nmetadata:\\r\\n name: argo-binding\\r\\n namespace: a1\\r\\nroleRef:\\r\\n apiGroup: rbac.authorization.k8s.io\\r\\n kind: Role\\r\\n name: argo-role\\r\\nsubjects:\\r\\n - kind: ServiceAccount\\r\\n name: argo\\r\\n namespace: a1\\r\\n---\\r\\napiVersion: v1\\r\\nkind: ConfigMap\\r\\nmetadata:\\r\\n name: workflow-controller-configmap\\r\\n namespace: a1\\r\\ndata:\\r\\n config: |\\r\\n containerRuntimeExecutor: k8sapi\\r\\n executor:\\r\\n imagePullPolicy: IfNotPresent\\r\\n resources:\\r\\n limits:\\r\\n cpu: 0.15\\r\\n memory: 512Mi\\r\\n instanceID: 735151a5-5c3c-4b20-9d28-5e36c7782de2\\r\\n---\\r\\napiVersion: v1\\r\\nkind: Service\\r\\nmetadata:\\r\\n name: workflow-controller-metrics\\r\\n namespace: a1\\r\\nspec:\\r\\n ports:\\r\\n - name: metrics\\r\\n port: 9090\\r\\n protocol: TCP\\r\\n targetPort: 9090\\r\\n selector:\\r\\n app: workflow-controller\\r\\n---\\r\\napiVersion: apps\\/v1\\r\\nkind: Deployment\\r\\nmetadata:\\r\\n name: workflow-controller\\r\\n namespace: a1\\r\\nspec:\\r\\n selector:\\r\\n matchLabels:\\r\\n app: workflow-controller\\r\\n template:\\r\\n metadata:\\r\\n labels:\\r\\n app: workflow-controller\\r\\n spec:\\r\\n \\r\\n #{nodeselector}\\r\\n containers:\\r\\n - args:\\r\\n - --configmap\\r\\n - workflow-controller-configmap\\r\\n - --executor-image\\r\\n - litmuschaos\\/argoexec:v3.2.9\\r\\n - --namespaced\\r\\n - --container-runtime-executor\\r\\n - k8sapi\\r\\n command:\\r\\n - workflow-controller\\r\\n image: litmuschaos\\/workflow-controller:v3.2.9\\r\\n name: workflow-controller\\r\\n securityContext:\\r\\n runAsUser: 2000\\r\\n allowPrivilegeEscalation: false\\r\\n env:\\r\\n - name: LEADER_ELECTION_DISABLE\\r\\n value: \\\"true\\\"\\r\\n resources:\\r\\n requests:\\r\\n memory: \\\"300Mi\\\"\\r\\n cpu: \\\"125m\\\"\\r\\n ephemeral-storage: \\\"500Mi\\\"\\r\\n limits:\\r\\n memory: \\\"500Mi\\\"\\r\\n cpu: \\\"225m\\\"\\r\\n ephemeral-storage: \\\"1Gi\\\"\\r\\n serviceAccountName: argo\\r\\n\\r\\n---\\r\\napiVersion: v1\\r\\nkind: ConfigMap\\r\\nmetadata:\\r\\n name: agent-config\\r\\n namespace: a1\\r\\ndata:\\r\\n SERVER_ADDR: http:\\/\\/litmusportal-frontend-service:9091\\/ws\\/query\\r\\n AGENT_SCOPE: namespace\\r\\n VERSION: ci\\r\\n START_TIME: \\\"1655215738\\\"\\r\\n SKIP_SSL_VERIFY: \\\"false\\\"\\r\\n CUSTOM_TLS_CERT: \\\"\\\"\\r\\n IS_CLUSTER_CONFIRMED: \\\"false\\\"\\r\\n COMPONENTS: |\\r\\n DEPLOYMENTS: [\\\"app=chaos-exporter\\\", \\\"name=chaos-operator\\\", \\\"app=event-tracker\\\", \\\"app=workflow-controller\\\"]\\r\\n---\\r\\napiVersion: v1\\r\\nkind: Secret\\r\\nmetadata:\\r\\n name: agent-secret\\r\\n namespace: a1\\r\\nstringData:\\r\\n CLUSTER_ID: 735151a5-5c3c-4b20-9d28-5e36c7782de2\\r\\n ACCESS_KEY: csvGtocxa9HLyMNUm9cXWvto97HUqIlk\\r\\n---\\r\\napiVersion: apps\\/v1\\r\\nkind: Deployment\\r\\nmetadata:\\r\\n name: subscriber\\r\\n namespace: a1\\r\\n labels:\\r\\n app: subscriber\\r\\nspec:\\r\\n selector:\\r\\n matchLabels:\\r\\n app: subscriber\\r\\n template:\\r\\n metadata:\\r\\n labels:\\r\\n app: subscriber\\r\\n spec:\\r\\n \\r\\n #{nodeselector}\\r\\n serviceAccountName: litmus\\r\\n containers:\\r\\n - name: subscriber\\r\\n image: litmuschaos\\/litmusportal-subscriber:ci\\r\\n resources:\\r\\n limits:\\r\\n cpu: 200m\\r\\n memory: 500Mi\\r\\n imagePullPolicy: Always\\r\\n securityContext:\\r\\n runAsUser: 2000\\r\\n allowPrivilegeEscalation: false\\r\\n envFrom:\\r\\n - configMapRef:\\r\\n name: agent-config\\r\\n - secretRef:\\r\\n name: agent-secret\\r\\n env:\\r\\n - name: AGENT_NAMESPACE\\r\\n valueFrom:\\r\\n fieldRef:\\r\\n fieldPath: metadata.namespace\\r\\n resources:\\r\\n requests:\\r\\n memory: \\\"300Mi\\\"\\r\\n cpu: \\\"125m\\\"\\r\\n ephemeral-storage: \\\"500Mi\\\"\\r\\n limits:\\r\\n memory: \\\"500Mi\\\"\\r\\n cpu: \\\"225m\\\"\\r\\n ephemeral-storage: \\\"1Gi\\\"\\r\\n---\\r\\napiVersion: apps\\/v1\\r\\nkind: Deployment\\r\\nmetadata:\\r\\n labels:\\r\\n app: event-tracker\\r\\n name: event-tracker\\r\\n namespace: a1\\r\\nspec:\\r\\n replicas: 1\\r\\n selector:\\r\\n matchLabels:\\r\\n app: event-tracker\\r\\n template:\\r\\n metadata:\\r\\n labels:\\r\\n app: event-tracker\\r\\n spec:\\r\\n \\r\\n #{nodeselector}\\r\\n serviceAccountName: event-tracker-sa\\r\\n containers:\\r\\n - image: litmuschaos\\/litmusportal-event-tracker:ci\\r\\n imagePullPolicy: Always\\r\\n securityContext:\\r\\n runAsUser: 2000\\r\\n allowPrivilegeEscalation: false\\r\\n name: litmus-event-tracker\\r\\n envFrom:\\r\\n - configMapRef:\\r\\n name: agent-config\\r\\n - secretRef:\\r\\n name: agent-secret\\r\\n env:\\r\\n - name: AGENT_NAMESPACE\\r\\n valueFrom:\\r\\n fieldRef:\\r\\n fieldPath: metadata.namespace\\r\\n resources:\\r\\n requests:\\r\\n memory: \\\"300Mi\\\"\\r\\n cpu: \\\"125m\\\"\\r\\n ephemeral-storage: \\\"500Mi\\\"\\r\\n limits:\\r\\n memory: \\\"500Mi\\\"\\r\\n cpu: \\\"225m\\\"\\r\\n ephemeral-storage: \\\"1Gi\\\"\\r\\n---\\r\\napiVersion: v1\\r\\nkind: ServiceAccount\\r\\nmetadata:\\r\\n name: litmus-namespace-scope\\r\\n namespace: a1\\r\\n labels:\\r\\n app.kubernetes.io\\/name: litmus\\r\\n # provide unique instance-id if applicable\\r\\n # app.kubernetes.io\\/instance: litmus-abcxzy\\r\\n app.kubernetes.io\\/version: v2.0.0\\r\\n app.kubernetes.io\\/component: operator-serviceaccount\\r\\n app.kubernetes.io\\/part-of: litmus\\r\\n app.kubernetes.io\\/managed-by: kubectl\\r\\n name: litmus-namespace-scope\\r\\n---\\r\\napiVersion: rbac.authorization.k8s.io\\/v1\\r\\nkind: Role\\r\\nmetadata:\\r\\n name: litmus-namespace-scope\\r\\n namespace: a1\\r\\n labels:\\r\\n app.kubernetes.io\\/name: litmus\\r\\n # provide unique instance-id if applicable\\r\\n # app.kubernetes.io\\/instance: litmus-abcxzy\\r\\n app.kubernetes.io\\/version: v2.0.0\\r\\n app.kubernetes.io\\/component: operator-role\\r\\n app.kubernetes.io\\/part-of: litmus\\r\\n app.kubernetes.io\\/managed-by: kubectl\\r\\n name: litmus-namespace-scope\\r\\nrules:\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"replicationcontrollers\\\", \\\"secrets\\\"]\\r\\n verbs: [\\\"get\\\", \\\"list\\\"]\\r\\n - apiGroups: [\\\"apps.openshift.io\\\"]\\r\\n resources: [\\\"deploymentconfigs\\\"]\\r\\n verbs: [\\\"get\\\", \\\"list\\\"]\\r\\n - apiGroups: [\\\"apps\\\"]\\r\\n resources: [\\\"deployments\\\", \\\"daemonsets\\\", \\\"replicasets\\\", \\\"statefulsets\\\"]\\r\\n verbs: [\\\"get\\\", \\\"list\\\", \\\"update\\\"]\\r\\n - apiGroups: [\\\"batch\\\"]\\r\\n resources: [\\\"jobs\\\"]\\r\\n verbs: [\\\"get\\\", \\\"list\\\", \\\"create\\\", \\\"deletecollection\\\"]\\r\\n - apiGroups: [\\\"argoproj.io\\\"]\\r\\n resources: [\\\"rollouts\\\"]\\r\\n verbs: [\\\"get\\\", \\\"list\\\"]\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"pods\\\", \\\"pods\\/exec\\\", \\\"configmaps\\\", \\\"events\\\", \\\"services\\\"]\\r\\n verbs:\\r\\n [\\r\\n \\\"get\\\",\\r\\n \\\"create\\\",\\r\\n \\\"update\\\",\\r\\n \\\"patch\\\",\\r\\n \\\"delete\\\",\\r\\n \\\"list\\\",\\r\\n \\\"watch\\\",\\r\\n \\\"deletecollection\\\",\\r\\n ]\\r\\n - apiGroups: [\\\"litmuschaos.io\\\"]\\r\\n resources: [\\\"chaosengines\\\", \\\"chaosexperiments\\\", \\\"chaosresults\\\"]\\r\\n verbs:\\r\\n [\\r\\n \\\"get\\\",\\r\\n \\\"create\\\",\\r\\n \\\"update\\\",\\r\\n \\\"patch\\\",\\r\\n \\\"delete\\\",\\r\\n \\\"list\\\",\\r\\n \\\"watch\\\",\\r\\n \\\"deletecollection\\\",\\r\\n ]\\r\\n---\\r\\napiVersion: rbac.authorization.k8s.io\\/v1\\r\\nkind: RoleBinding\\r\\nmetadata:\\r\\n name: litmus-namespace-scope\\r\\n namespace: a1\\r\\n labels:\\r\\n app.kubernetes.io\\/name: litmus\\r\\n # provide unique instance-id if applicable\\r\\n # app.kubernetes.io\\/instance: litmus-abcxzy\\r\\n app.kubernetes.io\\/version: v2.0.0\\r\\n app.kubernetes.io\\/component: operator-rolebinding\\r\\n app.kubernetes.io\\/part-of: litmus\\r\\n app.kubernetes.io\\/managed-by: kubectl\\r\\n name: litmus-namespace-scope\\r\\nroleRef:\\r\\n apiGroup: rbac.authorization.k8s.io\\r\\n kind: Role\\r\\n name: litmus-namespace-scope\\r\\nsubjects:\\r\\n - kind: ServiceAccount\\r\\n name: litmus-namespace-scope\\r\\n namespace: a1\\r\\n\\r\\n---\\r\\napiVersion: rbac.authorization.k8s.io\\/v1\\r\\nkind: Role\\r\\nmetadata:\\r\\n name: subscriber-role\\r\\n namespace: a1\\r\\n labels:\\r\\n name: subscriber-role\\r\\nrules:\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"configmaps\\\", \\\"secrets\\\"]\\r\\n verbs: [\\\"get\\\", \\\"create\\\", \\\"delete\\\", \\\"update\\\"]\\r\\n\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"pods\\/log\\\"]\\r\\n verbs: [\\\"get\\\", \\\"list\\\", \\\"watch\\\"]\\r\\n\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"pods\\\", \\\"namespaces\\\", \\\"nodes\\\", \\\"services\\\"]\\r\\n verbs: [\\\"get\\\", \\\"list\\\", \\\"watch\\\"]\\r\\n\\r\\n - apiGroups: [\\\"litmuschaos.io\\\"]\\r\\n resources: [\\\"chaosengines\\\", \\\"chaosschedules\\\", \\\"chaosresults\\\"]\\r\\n verbs: [\\\"get\\\", \\\"list\\\", \\\"create\\\", \\\"delete\\\", \\\"update\\\", \\\"watch\\\"]\\r\\n\\r\\n - apiGroups: [\\\"apps.openshift.io\\\"]\\r\\n resources: [\\\"deploymentconfigs\\\"]\\r\\n verbs: [\\\"get\\\", \\\"list\\\"]\\r\\n\\r\\n - apiGroups: [\\\"apps\\\"]\\r\\n resources: [\\\"deployments\\\", \\\"daemonsets\\\", \\\"replicasets\\\", \\\"statefulsets\\\"]\\r\\n verbs: [\\\"get\\\", \\\"list\\\", \\\"delete\\\"]\\r\\n\\r\\n - apiGroups: [\\\"argoproj.io\\\"]\\r\\n resources:\\r\\n [\\r\\n \\\"workflows\\\",\\r\\n \\\"workflows\\/finalizers\\\",\\r\\n \\\"workflowtemplates\\\",\\r\\n \\\"workflowtemplates\\/finalizers\\\",\\r\\n \\\"cronworkflows\\\",\\r\\n \\\"cronworkflows\\/finalizers\\\",\\r\\n \\\"rollouts\\\",\\r\\n ]\\r\\n verbs: [\\\"get\\\", \\\"list\\\", \\\"create\\\", \\\"delete\\\", \\\"update\\\", \\\"watch\\\"]\\r\\n---\\r\\napiVersion: rbac.authorization.k8s.io\\/v1\\r\\nkind: RoleBinding\\r\\nmetadata:\\r\\n name: subscriber-role-binding\\r\\n namespace: a1\\r\\nsubjects:\\r\\n - kind: ServiceAccount\\r\\n name: litmus\\r\\n namespace: a1\\r\\nroleRef:\\r\\n kind: Role\\r\\n name: subscriber-role\\r\\n apiGroup: rbac.authorization.k8s.io\\r\\n---\\r\\napiVersion: v1\\r\\nkind: ServiceAccount\\r\\nmetadata:\\r\\n name: litmus-admin\\r\\n namespace: a1\\r\\n labels:\\r\\n name: litmus-admin\\r\\n---\\r\\napiVersion: rbac.authorization.k8s.io\\/v1\\r\\nkind: Role\\r\\nmetadata:\\r\\n name: litmus-admin\\r\\n namespace: a1\\r\\n labels:\\r\\n name: litmus-admin\\r\\nrules:\\r\\n # ***************************************************************************************\\r\\n # Permissions needed for preparing and monitor the chaos resources by chaos-runner\\r\\n # ***************************************************************************************\\r\\n\\r\\n # The chaos operator watches the chaosengine resource and orchestartes the chaos experiment..\\r\\n ## .. by creating the chaos-runner\\r\\n\\r\\n # for creating and monitoring the chaos-runner pods\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"pods\\\", \\\"events\\\"]\\r\\n verbs:\\r\\n [\\\"create\\\", \\\"delete\\\", \\\"get\\\", \\\"list\\\", \\\"patch\\\", \\\"update\\\", \\\"deletecollection\\\"]\\r\\n\\r\\n # for fetching configmaps and secrets to inject into chaos-runner pod (if specified)\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"secrets\\\", \\\"configmaps\\\"]\\r\\n verbs: [\\\"get\\\", \\\"list\\\"]\\r\\n\\r\\n # for tracking & getting logs of the pods created by chaos-runner to implement individual steps in the runner\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"pods\\/log\\\"]\\r\\n verbs: [\\\"get\\\", \\\"list\\\", \\\"watch\\\"]\\r\\n\\r\\n # for configuring and monitor the experiment job by chaos-runner pod\\r\\n - apiGroups: [\\\"batch\\\"]\\r\\n resources: [\\\"jobs\\\"]\\r\\n verbs: [\\\"create\\\", \\\"list\\\", \\\"get\\\", \\\"delete\\\", \\\"deletecollection\\\"]\\r\\n\\r\\n # ********************************************************************\\r\\n # Permissions needed for creation and discovery of chaos experiments\\r\\n # ********************************************************************\\r\\n\\r\\n # The helper pods are created by experiment to perform the actual chaos injection ...\\r\\n # ... for a period of chaos duration\\r\\n\\r\\n # for creating and deleting the helper or target app pod and events by experiment\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"pods\\\"]\\r\\n verbs: [\\\"create\\\", \\\"delete\\\", \\\"deletecollection\\\"]\\r\\n\\r\\n # for creating and monitoring the events for chaos operations\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"events\\\"]\\r\\n verbs:\\r\\n [\\\"create\\\", \\\"delete\\\", \\\"get\\\", \\\"list\\\", \\\"patch\\\", \\\"update\\\", \\\"deletecollection\\\"]\\r\\n\\r\\n # for monitoring the helper and target app pod\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"pods\\\"]\\r\\n verbs: [\\\"get\\\", \\\"list\\\", \\\"patch\\\", \\\"update\\\"]\\r\\n\\r\\n # for creating and managing to execute comands inside target container\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"pods\\/exec\\\", \\\"pods\\/eviction\\\", \\\"replicationcontrollers\\\"]\\r\\n verbs: [\\\"get\\\", \\\"list\\\", \\\"create\\\"]\\r\\n\\r\\n # for tracking & getting logs of the pods created by experiment pod to implement individual steps in the experiment\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"pods\\/log\\\"]\\r\\n verbs: [\\\"get\\\", \\\"list\\\", \\\"watch\\\"]\\r\\n\\r\\n # for creating and monitoring liveness services or monitoring target app services during chaos injection\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"services\\\"]\\r\\n verbs: [\\\"create\\\", \\\"delete\\\", \\\"get\\\", \\\"list\\\", \\\"delete\\\", \\\"deletecollection\\\"]\\r\\n\\r\\n # for checking the app parent resources as deployments or sts and are eligible chaos candidates\\r\\n - apiGroups: [\\\"apps\\\"]\\r\\n resources: [\\\"deployments\\\", \\\"statefulsets\\\"]\\r\\n verbs: [\\\"list\\\", \\\"get\\\", \\\"patch\\\", \\\"update\\\"]\\r\\n\\r\\n # for checking the app parent resources as replicasets and are eligible chaos candidates\\r\\n - apiGroups: [\\\"apps\\\"]\\r\\n resources: [\\\"replicasets\\\"]\\r\\n verbs: [\\\"list\\\", \\\"get\\\"]\\r\\n\\r\\n # for checking the app parent resources as deamonsets and are eligible chaos candidates\\r\\n - apiGroups: [\\\"apps\\\"]\\r\\n resources: [\\\"daemonsets\\\"]\\r\\n verbs: [\\\"list\\\", \\\"get\\\", \\\"delete\\\"]\\r\\n\\r\\n # for checking (openshift) app parent resources if they are eligible chaos candidates\\r\\n - apiGroups: [\\\"apps.openshift.io\\\"]\\r\\n resources: [\\\"deploymentconfigs\\\"]\\r\\n verbs: [\\\"list\\\", \\\"get\\\"]\\r\\n\\r\\n # for checking (argo) app parent resources if they are eligible chaos candidates\\r\\n - apiGroups: [\\\"argoproj.io\\\"]\\r\\n resources: [\\\"rollouts\\\"]\\r\\n verbs: [\\\"list\\\", \\\"get\\\"]\\r\\n\\r\\n # for creation, status polling and deletion of litmus chaos resources used within a chaos workflow\\r\\n - apiGroups: [\\\"litmuschaos.io\\\"]\\r\\n resources: [\\\"chaosengines\\\", \\\"chaosexperiments\\\", \\\"chaosresults\\\"]\\r\\n verbs: [\\\"create\\\", \\\"list\\\", \\\"get\\\", \\\"patch\\\", \\\"update\\\", \\\"delete\\\"]\\r\\n\\r\\n # for experiment to perform node status checks and other node level operations like taint, drain in the experiment.\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"nodes\\\"]\\r\\n verbs: [\\\"patch\\\", \\\"get\\\", \\\"list\\\", \\\"update\\\"]\\r\\n---\\r\\napiVersion: rbac.authorization.k8s.io\\/v1\\r\\nkind: RoleBinding\\r\\nmetadata:\\r\\n name: litmus-admin\\r\\n namespace: a1\\r\\n labels:\\r\\n name: litmus-admin\\r\\nroleRef:\\r\\n apiGroup: rbac.authorization.k8s.io\\r\\n kind: Role\\r\\n name: litmus-admin\\r\\nsubjects:\\r\\n - kind: ServiceAccount\\r\\n name: litmus-admin\\r\\n namespace: a1\\r\\n---\\r\\napiVersion: v1\\r\\nkind: ServiceAccount\\r\\nmetadata:\\r\\n name: argo-chaos\\r\\n namespace: a1\\r\\n---\\r\\napiVersion: rbac.authorization.k8s.io\\/v1\\r\\nkind: Role\\r\\nmetadata:\\r\\n name: chaos-role\\r\\n namespace: a1\\r\\nrules:\\r\\n # for managing the pods created by workflow controller to implement individual steps in the workflow\\r\\n - apiGroups: [\\\"\\\"]\\r\\n resources: [\\\"pods\\\", \\\"services\\\"]\\r\\n verbs: [\\\"create\\\", \\\"get\\\", \\\"watch\\\", \\\"patch\\\", \\\"delete\\\", \\\"list\\\"]\\r\\n\\r\\n # for tracking & getting logs of the pods created by workflow controller to implement individual steps in the workflow\\r\\n - apiGroups: ['']\\r\\n resources: ['pods\\/log', 'secrets', 'configmaps']\\r\\n verbs: ['get', 'watch', 'create', 'delete', 'patch']\\r\\n\\r\\n # for creation & deletion of application in predefined workflows\\r\\n - apiGroups: [\\\"apps\\\"]\\r\\n resources: ['deployments', 'statefulsets']\\r\\n verbs: ['get', 'watch', 'patch' , 'create', 'delete']\\r\\n\\r\\n # for creation, status polling and deletion of litmus chaos resources used within a chaos workflow\\r\\n - apiGroups: [\\\"litmuschaos.io\\\"]\\r\\n resources:\\r\\n [\\\"chaosengines\\\", \\\"chaosexperiments\\\", \\\"chaosresults\\\", \\\"chaosschedules\\\"]\\r\\n verbs: [\\\"create\\\", \\\"list\\\", \\\"get\\\", \\\"patch\\\", \\\"delete\\\", \\\"watch\\\"]\\r\\n---\\r\\napiVersion: rbac.authorization.k8s.io\\/v1\\r\\nkind: RoleBinding\\r\\nmetadata:\\r\\n name: chaos-role-binding\\r\\n namespace: a1\\r\\nroleRef:\\r\\n apiGroup: rbac.authorization.k8s.io\\r\\n kind: Role\\r\\n name: chaos-role\\r\\nsubjects:\\r\\n - kind: ServiceAccount\\r\\n name: argo-chaos\\r\\n namespace: a1\\r\\n---\\r\\napiVersion: v1\\r\\nkind: ServiceAccount\\r\\nmetadata:\\r\\n name: event-tracker-sa\\r\\n namespace: a1\\r\\n---\\r\\napiVersion: rbac.authorization.k8s.io\\/v1\\r\\nkind: Role\\r\\nmetadata:\\r\\n name: event-tracker-role\\r\\n namespace: a1\\r\\nrules:\\r\\n - apiGroups:\\r\\n - eventtracker.litmuschaos.io\\r\\n resources:\\r\\n - eventtrackerpolicies\\r\\n verbs:\\r\\n - create\\r\\n - delete\\r\\n - get\\r\\n - list\\r\\n - patch\\r\\n - update\\r\\n - watch\\r\\n - apiGroups:\\r\\n - eventtracker.litmuschaos.io\\r\\n resources:\\r\\n - eventtrackerpolicies\\/status\\r\\n verbs:\\r\\n - get\\r\\n - patch\\r\\n - update\\r\\n - apiGroups:\\r\\n - \\\"\\\"\\r\\n - extensions\\r\\n - apps\\r\\n resources:\\r\\n - deployments\\r\\n - daemonsets\\r\\n - statefulsets\\r\\n - pods\\r\\n - configmaps\\r\\n - secrets\\r\\n verbs:\\r\\n - get\\r\\n - list\\r\\n - watch\\r\\n---\\r\\napiVersion: rbac.authorization.k8s.io\\/v1\\r\\nkind: RoleBinding\\r\\nmetadata:\\r\\n name: event-tracker-role-binding\\r\\n namespace: a1\\r\\nroleRef:\\r\\n apiGroup: rbac.authorization.k8s.io\\r\\n kind: Role\\r\\n name: event-tracker-role\\r\\nsubjects:\\r\\n - kind: ServiceAccount\\r\\n name: event-tracker-sa\\r\\n namespace: a1"
      }
    ]
  }
}