// Copyright 2021 Harness Inc. All rights reserved.
// Use of this source code is governed by the PolyForm Free Trial 1.0.0 license
// that can be found in the licenses directory at the root of this repository, also available at
// https://polyformproject.org/wp-content/uploads/2020/05/PolyForm-Free-Trial-1.0.0.txt.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: scm.proto

package testpackage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GitProvider int32

const (
	GitProvider_BITBUCKET  GitProvider = 0
	GitProvider_GITEA      GitProvider = 1
	GitProvider_GITHUB     GitProvider = 2
	GitProvider_GITLAB     GitProvider = 3
	GitProvider_GOGS       GitProvider = 4
	GitProvider_STASH      GitProvider = 5
	GitProvider_CODECOMMIT GitProvider = 6
	GitProvider_AZURE      GitProvider = 7
)

// Enum value maps for GitProvider.
var (
	GitProvider_name = map[int32]string{
		0: "BITBUCKET",
		1: "GITEA",
		2: "GITHUB",
		3: "GITLAB",
		4: "GOGS",
		5: "STASH",
		6: "CODECOMMIT",
		7: "AZURE",
	}
	GitProvider_value = map[string]int32{
		"BITBUCKET":  0,
		"GITEA":      1,
		"GITHUB":     2,
		"GITLAB":     3,
		"GOGS":       4,
		"STASH":      5,
		"CODECOMMIT": 6,
		"AZURE":      7,
	}
)

func (x GitProvider) Enum() *GitProvider {
	p := new(GitProvider)
	*p = x
	return p
}

func (x GitProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_scm_proto_enumTypes[0].Descriptor()
}

func (GitProvider) Type() protoreflect.EnumType {
	return &file_scm_proto_enumTypes[0]
}

func (x GitProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitProvider.Descriptor instead.
func (GitProvider) EnumDescriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{0}
}

type Action int32

const (
	Action_UNKNOWN Action = 0
	Action_CREATE  Action = 1
	Action_UPDATE  Action = 2
	Action_DELETE  Action = 3
	// Issues
	Action_OPEN    Action = 4
	Action_REOPEN  Action = 5
	Action_CLOSE   Action = 6
	Action_LABEL   Action = 7
	Action_UNLABEL Action = 8
	// pull requests
	Action_SYNC  Action = 9
	Action_MERGE Action = 10
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "CREATE",
		2:  "UPDATE",
		3:  "DELETE",
		4:  "OPEN",
		5:  "REOPEN",
		6:  "CLOSE",
		7:  "LABEL",
		8:  "UNLABEL",
		9:  "SYNC",
		10: "MERGE",
	}
	Action_value = map[string]int32{
		"UNKNOWN": 0,
		"CREATE":  1,
		"UPDATE":  2,
		"DELETE":  3,
		"OPEN":    4,
		"REOPEN":  5,
		"CLOSE":   6,
		"LABEL":   7,
		"UNLABEL": 8,
		"SYNC":    9,
		"MERGE":   10,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_scm_proto_enumTypes[1].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_scm_proto_enumTypes[1]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{1}
}

type ContentType int32

const (
	ContentType_UNKNOWN_CONTENT ContentType = 0
	ContentType_FILE            ContentType = 1
	ContentType_DIRECTORY       ContentType = 2
	ContentType_SYMLINK         ContentType = 3
	ContentType_GITLINK         ContentType = 4
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0: "UNKNOWN_CONTENT",
		1: "FILE",
		2: "DIRECTORY",
		3: "SYMLINK",
		4: "GITLINK",
	}
	ContentType_value = map[string]int32{
		"UNKNOWN_CONTENT": 0,
		"FILE":            1,
		"DIRECTORY":       2,
		"SYMLINK":         3,
		"GITLINK":         4,
	}
)

func (x ContentType) Enum() *ContentType {
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_scm_proto_enumTypes[2].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
	return &file_scm_proto_enumTypes[2]
}

func (x ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{2}
}

type GithubWebhookEvent int32

const (
	GithubWebhookEvent_GITHUB_CREATE              GithubWebhookEvent = 0
	GithubWebhookEvent_GITHUB_DELETE              GithubWebhookEvent = 1
	GithubWebhookEvent_GITHUB_DEPLOYMENT          GithubWebhookEvent = 2
	GithubWebhookEvent_GITHUB_ISSUE               GithubWebhookEvent = 3
	GithubWebhookEvent_GITHUB_ISSUE_COMMENT       GithubWebhookEvent = 4
	GithubWebhookEvent_GITHUB_PULL_REQUEST        GithubWebhookEvent = 5
	GithubWebhookEvent_GITHUB_PULL_REQUEST_REVIEW GithubWebhookEvent = 6
	GithubWebhookEvent_GITHUB_PUSH                GithubWebhookEvent = 7
)

// Enum value maps for GithubWebhookEvent.
var (
	GithubWebhookEvent_name = map[int32]string{
		0: "GITHUB_CREATE",
		1: "GITHUB_DELETE",
		2: "GITHUB_DEPLOYMENT",
		3: "GITHUB_ISSUE",
		4: "GITHUB_ISSUE_COMMENT",
		5: "GITHUB_PULL_REQUEST",
		6: "GITHUB_PULL_REQUEST_REVIEW",
		7: "GITHUB_PUSH",
	}
	GithubWebhookEvent_value = map[string]int32{
		"GITHUB_CREATE":              0,
		"GITHUB_DELETE":              1,
		"GITHUB_DEPLOYMENT":          2,
		"GITHUB_ISSUE":               3,
		"GITHUB_ISSUE_COMMENT":       4,
		"GITHUB_PULL_REQUEST":        5,
		"GITHUB_PULL_REQUEST_REVIEW": 6,
		"GITHUB_PUSH":                7,
	}
)

func (x GithubWebhookEvent) Enum() *GithubWebhookEvent {
	p := new(GithubWebhookEvent)
	*p = x
	return p
}

func (x GithubWebhookEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GithubWebhookEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_scm_proto_enumTypes[3].Descriptor()
}

func (GithubWebhookEvent) Type() protoreflect.EnumType {
	return &file_scm_proto_enumTypes[3]
}

func (x GithubWebhookEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GithubWebhookEvent.Descriptor instead.
func (GithubWebhookEvent) EnumDescriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{3}
}

type GitlabWebhookEvent int32

const (
	GitlabWebhookEvent_GITLAB_COMMENT GitlabWebhookEvent = 0
	GitlabWebhookEvent_GITLAB_ISSUES  GitlabWebhookEvent = 1
	GitlabWebhookEvent_GITLAB_MERGE   GitlabWebhookEvent = 2
	GitlabWebhookEvent_GITLAB_PUSH    GitlabWebhookEvent = 3
	GitlabWebhookEvent_GITLAB_TAG     GitlabWebhookEvent = 4
)

// Enum value maps for GitlabWebhookEvent.
var (
	GitlabWebhookEvent_name = map[int32]string{
		0: "GITLAB_COMMENT",
		1: "GITLAB_ISSUES",
		2: "GITLAB_MERGE",
		3: "GITLAB_PUSH",
		4: "GITLAB_TAG",
	}
	GitlabWebhookEvent_value = map[string]int32{
		"GITLAB_COMMENT": 0,
		"GITLAB_ISSUES":  1,
		"GITLAB_MERGE":   2,
		"GITLAB_PUSH":    3,
		"GITLAB_TAG":     4,
	}
)

func (x GitlabWebhookEvent) Enum() *GitlabWebhookEvent {
	p := new(GitlabWebhookEvent)
	*p = x
	return p
}

func (x GitlabWebhookEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitlabWebhookEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_scm_proto_enumTypes[4].Descriptor()
}

func (GitlabWebhookEvent) Type() protoreflect.EnumType {
	return &file_scm_proto_enumTypes[4]
}

func (x GitlabWebhookEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitlabWebhookEvent.Descriptor instead.
func (GitlabWebhookEvent) EnumDescriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{4}
}

type BitbucketCloudWebhookEvent int32

const (
	BitbucketCloudWebhookEvent_BITBUCKET_CLOUD_ISSUE                BitbucketCloudWebhookEvent = 0
	BitbucketCloudWebhookEvent_BITBUCKET_CLOUD_ISSUE_COMMENT        BitbucketCloudWebhookEvent = 1
	BitbucketCloudWebhookEvent_BITBUCKET_CLOUD_PULL_REQUEST         BitbucketCloudWebhookEvent = 2
	BitbucketCloudWebhookEvent_BITBUCKET_CLOUD_PULL_REQUEST_COMMENT BitbucketCloudWebhookEvent = 3
	BitbucketCloudWebhookEvent_BITBUCKET_CLOUD_PUSH                 BitbucketCloudWebhookEvent = 4
)

// Enum value maps for BitbucketCloudWebhookEvent.
var (
	BitbucketCloudWebhookEvent_name = map[int32]string{
		0: "BITBUCKET_CLOUD_ISSUE",
		1: "BITBUCKET_CLOUD_ISSUE_COMMENT",
		2: "BITBUCKET_CLOUD_PULL_REQUEST",
		3: "BITBUCKET_CLOUD_PULL_REQUEST_COMMENT",
		4: "BITBUCKET_CLOUD_PUSH",
	}
	BitbucketCloudWebhookEvent_value = map[string]int32{
		"BITBUCKET_CLOUD_ISSUE":                0,
		"BITBUCKET_CLOUD_ISSUE_COMMENT":        1,
		"BITBUCKET_CLOUD_PULL_REQUEST":         2,
		"BITBUCKET_CLOUD_PULL_REQUEST_COMMENT": 3,
		"BITBUCKET_CLOUD_PUSH":                 4,
	}
)

func (x BitbucketCloudWebhookEvent) Enum() *BitbucketCloudWebhookEvent {
	p := new(BitbucketCloudWebhookEvent)
	*p = x
	return p
}

func (x BitbucketCloudWebhookEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BitbucketCloudWebhookEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_scm_proto_enumTypes[5].Descriptor()
}

func (BitbucketCloudWebhookEvent) Type() protoreflect.EnumType {
	return &file_scm_proto_enumTypes[5]
}

func (x BitbucketCloudWebhookEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BitbucketCloudWebhookEvent.Descriptor instead.
func (BitbucketCloudWebhookEvent) EnumDescriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{5}
}

type BitbucketServerWebhookEvent int32

const (
	BitbucketServerWebhookEvent_BITBUCKET_SERVER_BRANCH_PUSH_TAG BitbucketServerWebhookEvent = 0
	BitbucketServerWebhookEvent_BITBUCKET_SERVER_PR              BitbucketServerWebhookEvent = 1
	BitbucketServerWebhookEvent_BITBUCKET_SERVER_PR_COMMENT      BitbucketServerWebhookEvent = 2
)

// Enum value maps for BitbucketServerWebhookEvent.
var (
	BitbucketServerWebhookEvent_name = map[int32]string{
		0: "BITBUCKET_SERVER_BRANCH_PUSH_TAG",
		1: "BITBUCKET_SERVER_PR",
		2: "BITBUCKET_SERVER_PR_COMMENT",
	}
	BitbucketServerWebhookEvent_value = map[string]int32{
		"BITBUCKET_SERVER_BRANCH_PUSH_TAG": 0,
		"BITBUCKET_SERVER_PR":              1,
		"BITBUCKET_SERVER_PR_COMMENT":      2,
	}
)

func (x BitbucketServerWebhookEvent) Enum() *BitbucketServerWebhookEvent {
	p := new(BitbucketServerWebhookEvent)
	*p = x
	return p
}

func (x BitbucketServerWebhookEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BitbucketServerWebhookEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_scm_proto_enumTypes[6].Descriptor()
}

func (BitbucketServerWebhookEvent) Type() protoreflect.EnumType {
	return &file_scm_proto_enumTypes[6]
}

func (x BitbucketServerWebhookEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BitbucketServerWebhookEvent.Descriptor instead.
func (BitbucketServerWebhookEvent) EnumDescriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{6}
}

type AzureWebhookEvent int32

const (
	AzureWebhookEvent_AZURE_PUSH                AzureWebhookEvent = 0
	AzureWebhookEvent_AZURE_PULLREQUEST_CREATED AzureWebhookEvent = 1
	AzureWebhookEvent_AZURE_PULLREQUEST_UPDATED AzureWebhookEvent = 2
	AzureWebhookEvent_AZURE_PULLREQUEST_MERGED  AzureWebhookEvent = 3
)

// Enum value maps for AzureWebhookEvent.
var (
	AzureWebhookEvent_name = map[int32]string{
		0: "AZURE_PUSH",
		1: "AZURE_PULLREQUEST_CREATED",
		2: "AZURE_PULLREQUEST_UPDATED",
		3: "AZURE_PULLREQUEST_MERGED",
	}
	AzureWebhookEvent_value = map[string]int32{
		"AZURE_PUSH":                0,
		"AZURE_PULLREQUEST_CREATED": 1,
		"AZURE_PULLREQUEST_UPDATED": 2,
		"AZURE_PULLREQUEST_MERGED":  3,
	}
)

func (x AzureWebhookEvent) Enum() *AzureWebhookEvent {
	p := new(AzureWebhookEvent)
	*p = x
	return p
}

func (x AzureWebhookEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AzureWebhookEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_scm_proto_enumTypes[7].Descriptor()
}

func (AzureWebhookEvent) Type() protoreflect.EnumType {
	return &file_scm_proto_enumTypes[7]
}

func (x AzureWebhookEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AzureWebhookEvent.Descriptor instead.
func (AzureWebhookEvent) EnumDescriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{7}
}

// User represents a user account.
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Login  string `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email  string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Avatar string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

// Reference represents a git reference.
type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Sha  string `protobuf:"bytes,3,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{1}
}

func (x *Reference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Reference) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Reference) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

// Perm represents a user's repository permissions.
type Perm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pull  bool `protobuf:"varint,1,opt,name=pull,proto3" json:"pull,omitempty"`
	Push  bool `protobuf:"varint,2,opt,name=push,proto3" json:"push,omitempty"`
	Admin bool `protobuf:"varint,3,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (x *Perm) Reset() {
	*x = Perm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Perm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Perm) ProtoMessage() {}

func (x *Perm) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Perm.ProtoReflect.Descriptor instead.
func (*Perm) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{2}
}

func (x *Perm) GetPull() bool {
	if x != nil {
		return x.Pull
	}
	return false
}

func (x *Perm) GetPush() bool {
	if x != nil {
		return x.Push
	}
	return false
}

func (x *Perm) GetAdmin() bool {
	if x != nil {
		return x.Admin
	}
	return false
}

// Repository represents a git repository.
type Repository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Perm      *Perm  `protobuf:"bytes,4,opt,name=perm,proto3" json:"perm,omitempty"`
	Branch    string `protobuf:"bytes,5,opt,name=branch,proto3" json:"branch,omitempty"`
	Private   bool   `protobuf:"varint,6,opt,name=private,proto3" json:"private,omitempty"`
	Clone     string `protobuf:"bytes,7,opt,name=clone,proto3" json:"clone,omitempty"`
	CloneSsh  string `protobuf:"bytes,8,opt,name=clone_ssh,json=cloneSsh,proto3" json:"clone_ssh,omitempty"`
	Link      string `protobuf:"bytes,9,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *Repository) Reset() {
	*x = Repository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repository) ProtoMessage() {}

func (x *Repository) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repository.ProtoReflect.Descriptor instead.
func (*Repository) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{3}
}

func (x *Repository) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Repository) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Repository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Repository) GetPerm() *Perm {
	if x != nil {
		return x.Perm
	}
	return nil
}

func (x *Repository) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *Repository) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *Repository) GetClone() string {
	if x != nil {
		return x.Clone
	}
	return ""
}

func (x *Repository) GetCloneSsh() string {
	if x != nil {
		return x.CloneSsh
	}
	return ""
}

func (x *Repository) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

// Signature identifies a git commit creator.
type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email  string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Login  string `protobuf:"bytes,4,opt,name=login,proto3" json:"login,omitempty"`
	Avatar string `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{4}
}

func (x *Signature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Signature) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Signature) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *Signature) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

// Commit represents a repository commit.
type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha       string     `protobuf:"bytes,1,opt,name=sha,proto3" json:"sha,omitempty"`
	Message   string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Author    *Signature `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	Committer *Signature `protobuf:"bytes,4,opt,name=committer,proto3" json:"committer,omitempty"`
	Link      string     `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{5}
}

func (x *Commit) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *Commit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Commit) GetAuthor() *Signature {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Commit) GetCommitter() *Signature {
	if x != nil {
		return x.Committer
	}
	return nil
}

func (x *Commit) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Color string `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{6}
}

func (x *Label) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Label) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type PullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number  int64      `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Title   string     `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Body    string     `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	Sha     string     `protobuf:"bytes,4,opt,name=sha,proto3" json:"sha,omitempty"`
	Ref     string     `protobuf:"bytes,5,opt,name=ref,proto3" json:"ref,omitempty"`
	Source  string     `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	Target  string     `protobuf:"bytes,7,opt,name=target,proto3" json:"target,omitempty"`
	Fork    string     `protobuf:"bytes,8,opt,name=fork,proto3" json:"fork,omitempty"`
	Link    string     `protobuf:"bytes,9,opt,name=link,proto3" json:"link,omitempty"`
	Closed  bool       `protobuf:"varint,10,opt,name=closed,proto3" json:"closed,omitempty"`
	Merged  bool       `protobuf:"varint,11,opt,name=merged,proto3" json:"merged,omitempty"`
	Base    *Reference `protobuf:"bytes,12,opt,name=base,proto3" json:"base,omitempty"`
	Head    *Reference `protobuf:"bytes,13,opt,name=head,proto3" json:"head,omitempty"`
	Author  *User      `protobuf:"bytes,14,opt,name=author,proto3" json:"author,omitempty"`
	Labels  []*Label   `protobuf:"bytes,17,rep,name=labels,proto3" json:"labels,omitempty"`
	Commits []*Commit  `protobuf:"bytes,18,rep,name=commits,proto3" json:"commits,omitempty"` // List of commits associated with the pull request
}

func (x *PullRequest) Reset() {
	*x = PullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequest) ProtoMessage() {}

func (x *PullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequest.ProtoReflect.Descriptor instead.
func (*PullRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{7}
}

func (x *PullRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *PullRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PullRequest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *PullRequest) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *PullRequest) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *PullRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PullRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *PullRequest) GetFork() string {
	if x != nil {
		return x.Fork
	}
	return ""
}

func (x *PullRequest) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *PullRequest) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *PullRequest) GetMerged() bool {
	if x != nil {
		return x.Merged
	}
	return false
}

func (x *PullRequest) GetBase() *Reference {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *PullRequest) GetHead() *Reference {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *PullRequest) GetAuthor() *User {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *PullRequest) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PullRequest) GetCommits() []*Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

type PullRequestHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action Action       `protobuf:"varint,1,opt,name=action,proto3,enum=io.harness.product.ci.scm.proto.Action" json:"action,omitempty"`
	Repo   *Repository  `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`
	Pr     *PullRequest `protobuf:"bytes,3,opt,name=pr,proto3" json:"pr,omitempty"`
	Sender *User        `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (x *PullRequestHook) Reset() {
	*x = PullRequestHook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullRequestHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequestHook) ProtoMessage() {}

func (x *PullRequestHook) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequestHook.ProtoReflect.Descriptor instead.
func (*PullRequestHook) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{8}
}

func (x *PullRequestHook) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_UNKNOWN
}

func (x *PullRequestHook) GetRepo() *Repository {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *PullRequestHook) GetPr() *PullRequest {
	if x != nil {
		return x.Pr
	}
	return nil
}

func (x *PullRequestHook) GetSender() *User {
	if x != nil {
		return x.Sender
	}
	return nil
}

type IssueCommentHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action  Action      `protobuf:"varint,1,opt,name=action,proto3,enum=io.harness.product.ci.scm.proto.Action" json:"action,omitempty"`
	Repo    *Repository `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`
	Issue   *Issue      `protobuf:"bytes,3,opt,name=issue,proto3" json:"issue,omitempty"`
	Sender  *User       `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
	Comment *Comment    `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *IssueCommentHook) Reset() {
	*x = IssueCommentHook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCommentHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCommentHook) ProtoMessage() {}

func (x *IssueCommentHook) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCommentHook.ProtoReflect.Descriptor instead.
func (*IssueCommentHook) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{9}
}

func (x *IssueCommentHook) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_UNKNOWN
}

func (x *IssueCommentHook) GetRepo() *Repository {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *IssueCommentHook) GetIssue() *Issue {
	if x != nil {
		return x.Issue
	}
	return nil
}

func (x *IssueCommentHook) GetSender() *User {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *IssueCommentHook) GetComment() *Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

type BranchHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action Action      `protobuf:"varint,1,opt,name=action,proto3,enum=io.harness.product.ci.scm.proto.Action" json:"action,omitempty"` // branch hook action can be create or delete
	Repo   *Repository `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`                                                  // repository where the event occurred
	Sender *User       `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`                                              // user that triggered the event
	Ref    *Reference  `protobuf:"bytes,4,opt,name=ref,proto3" json:"ref,omitempty"`                                                    // git ref object
}

func (x *BranchHook) Reset() {
	*x = BranchHook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchHook) ProtoMessage() {}

func (x *BranchHook) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchHook.ProtoReflect.Descriptor instead.
func (*BranchHook) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{10}
}

func (x *BranchHook) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_UNKNOWN
}

func (x *BranchHook) GetRepo() *Repository {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *BranchHook) GetSender() *User {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *BranchHook) GetRef() *Reference {
	if x != nil {
		return x.Ref
	}
	return nil
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Body string `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	User *User  `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{11}
}

func (x *Comment) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Comment) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Comment) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type Issue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int32        `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Title  string       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Body   string       `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	Link   string       `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`
	Labels []string     `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
	Closed bool         `protobuf:"varint,6,opt,name=closed,proto3" json:"closed,omitempty"`
	Locked bool         `protobuf:"varint,7,opt,name=locked,proto3" json:"locked,omitempty"`
	User   *User        `protobuf:"bytes,8,opt,name=user,proto3" json:"user,omitempty"`
	Pr     *PullRequest `protobuf:"bytes,9,opt,name=pr,proto3" json:"pr,omitempty"`
}

func (x *Issue) Reset() {
	*x = Issue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Issue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issue) ProtoMessage() {}

func (x *Issue) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issue.ProtoReflect.Descriptor instead.
func (*Issue) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{12}
}

func (x *Issue) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Issue) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Issue) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Issue) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Issue) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Issue) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *Issue) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *Issue) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Issue) GetPr() *PullRequest {
	if x != nil {
		return x.Pr
	}
	return nil
}

type PushHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref     string      `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	BaseRef string      `protobuf:"bytes,2,opt,name=base_ref,json=baseRef,proto3" json:"base_ref,omitempty"`
	Repo    *Repository `protobuf:"bytes,3,opt,name=repo,proto3" json:"repo,omitempty"`
	Before  string      `protobuf:"bytes,4,opt,name=before,proto3" json:"before,omitempty"`
	After   string      `protobuf:"bytes,5,opt,name=after,proto3" json:"after,omitempty"`
	Commit  *Commit     `protobuf:"bytes,6,opt,name=commit,proto3" json:"commit,omitempty"`
	Sender  *User       `protobuf:"bytes,7,opt,name=sender,proto3" json:"sender,omitempty"`
	Commits []*Commit   `protobuf:"bytes,8,rep,name=commits,proto3" json:"commits,omitempty"` // List of commits associated with the push request
}

func (x *PushHook) Reset() {
	*x = PushHook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushHook) ProtoMessage() {}

func (x *PushHook) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushHook.ProtoReflect.Descriptor instead.
func (*PushHook) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{13}
}

func (x *PushHook) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *PushHook) GetBaseRef() string {
	if x != nil {
		return x.BaseRef
	}
	return ""
}

func (x *PushHook) GetRepo() *Repository {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *PushHook) GetBefore() string {
	if x != nil {
		return x.Before
	}
	return ""
}

func (x *PushHook) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

func (x *PushHook) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *PushHook) GetSender() *User {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *PushHook) GetCommits() []*Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Header_Pair `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{14}
}

func (x *Header) GetFields() []*Header_Pair {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ParseWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header   *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Body     string      `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Secret   string      `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
	Provider GitProvider `protobuf:"varint,4,opt,name=provider,proto3,enum=io.harness.product.ci.scm.proto.GitProvider" json:"provider,omitempty"`
}

func (x *ParseWebhookRequest) Reset() {
	*x = ParseWebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseWebhookRequest) ProtoMessage() {}

func (x *ParseWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseWebhookRequest.ProtoReflect.Descriptor instead.
func (*ParseWebhookRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{15}
}

func (x *ParseWebhookRequest) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ParseWebhookRequest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *ParseWebhookRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *ParseWebhookRequest) GetProvider() GitProvider {
	if x != nil {
		return x.Provider
	}
	return GitProvider_BITBUCKET
}

type ParseWebhookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Hook:
	//	*ParseWebhookResponse_Pr
	//	*ParseWebhookResponse_Push
	//	*ParseWebhookResponse_Comment
	//	*ParseWebhookResponse_Branch
	Hook isParseWebhookResponse_Hook `protobuf_oneof:"hook"`
}

func (x *ParseWebhookResponse) Reset() {
	*x = ParseWebhookResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseWebhookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseWebhookResponse) ProtoMessage() {}

func (x *ParseWebhookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseWebhookResponse.ProtoReflect.Descriptor instead.
func (*ParseWebhookResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{16}
}

func (m *ParseWebhookResponse) GetHook() isParseWebhookResponse_Hook {
	if m != nil {
		return m.Hook
	}
	return nil
}

func (x *ParseWebhookResponse) GetPr() *PullRequestHook {
	if x, ok := x.GetHook().(*ParseWebhookResponse_Pr); ok {
		return x.Pr
	}
	return nil
}

func (x *ParseWebhookResponse) GetPush() *PushHook {
	if x, ok := x.GetHook().(*ParseWebhookResponse_Push); ok {
		return x.Push
	}
	return nil
}

func (x *ParseWebhookResponse) GetComment() *IssueCommentHook {
	if x, ok := x.GetHook().(*ParseWebhookResponse_Comment); ok {
		return x.Comment
	}
	return nil
}

func (x *ParseWebhookResponse) GetBranch() *BranchHook {
	if x, ok := x.GetHook().(*ParseWebhookResponse_Branch); ok {
		return x.Branch
	}
	return nil
}

type isParseWebhookResponse_Hook interface {
	isParseWebhookResponse_Hook()
}

type ParseWebhookResponse_Pr struct {
	Pr *PullRequestHook `protobuf:"bytes,1,opt,name=pr,proto3,oneof"`
}

type ParseWebhookResponse_Push struct {
	Push *PushHook `protobuf:"bytes,2,opt,name=push,proto3,oneof"`
}

type ParseWebhookResponse_Comment struct {
	Comment *IssueCommentHook `protobuf:"bytes,3,opt,name=comment,proto3,oneof"`
}

type ParseWebhookResponse_Branch struct {
	Branch *BranchHook `protobuf:"bytes,4,opt,name=branch,proto3,oneof"`
}

func (*ParseWebhookResponse_Pr) isParseWebhookResponse_Hook() {}

func (*ParseWebhookResponse_Push) isParseWebhookResponse_Hook() {}

func (*ParseWebhookResponse_Comment) isParseWebhookResponse_Hook() {}

func (*ParseWebhookResponse_Branch) isParseWebhookResponse_Hook() {}

type GithubApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId      string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	PrivateKey string `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *GithubApp) Reset() {
	*x = GithubApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubApp) ProtoMessage() {}

func (x *GithubApp) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubApp.ProtoReflect.Descriptor instead.
func (*GithubApp) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{17}
}

func (x *GithubApp) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *GithubApp) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

type GithubProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Provider:
	//	*GithubProvider_AccessToken
	//	*GithubProvider_GithubApp
	Provider isGithubProvider_Provider `protobuf_oneof:"provider"`
}

func (x *GithubProvider) Reset() {
	*x = GithubProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubProvider) ProtoMessage() {}

func (x *GithubProvider) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubProvider.ProtoReflect.Descriptor instead.
func (*GithubProvider) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{18}
}

func (m *GithubProvider) GetProvider() isGithubProvider_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (x *GithubProvider) GetAccessToken() string {
	if x, ok := x.GetProvider().(*GithubProvider_AccessToken); ok {
		return x.AccessToken
	}
	return ""
}

func (x *GithubProvider) GetGithubApp() *GithubApp {
	if x, ok := x.GetProvider().(*GithubProvider_GithubApp); ok {
		return x.GithubApp
	}
	return nil
}

type isGithubProvider_Provider interface {
	isGithubProvider_Provider()
}

type GithubProvider_AccessToken struct {
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3,oneof"`
}

type GithubProvider_GithubApp struct {
	GithubApp *GithubApp `protobuf:"bytes,2,opt,name=github_app,json=githubApp,proto3,oneof"`
}

func (*GithubProvider_AccessToken) isGithubProvider_Provider() {}

func (*GithubProvider_GithubApp) isGithubProvider_Provider() {}

type GitlabProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Provider:
	//	*GitlabProvider_AccessToken
	//	*GitlabProvider_PersonalToken
	Provider isGitlabProvider_Provider `protobuf_oneof:"provider"`
}

func (x *GitlabProvider) Reset() {
	*x = GitlabProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitlabProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabProvider) ProtoMessage() {}

func (x *GitlabProvider) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabProvider.ProtoReflect.Descriptor instead.
func (*GitlabProvider) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{19}
}

func (m *GitlabProvider) GetProvider() isGitlabProvider_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (x *GitlabProvider) GetAccessToken() string {
	if x, ok := x.GetProvider().(*GitlabProvider_AccessToken); ok {
		return x.AccessToken
	}
	return ""
}

func (x *GitlabProvider) GetPersonalToken() string {
	if x, ok := x.GetProvider().(*GitlabProvider_PersonalToken); ok {
		return x.PersonalToken
	}
	return ""
}

type isGitlabProvider_Provider interface {
	isGitlabProvider_Provider()
}

type GitlabProvider_AccessToken struct {
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3,oneof"`
}

type GitlabProvider_PersonalToken struct {
	PersonalToken string `protobuf:"bytes,2,opt,name=personal_token,json=personalToken,proto3,oneof"`
}

func (*GitlabProvider_AccessToken) isGitlabProvider_Provider() {}

func (*GitlabProvider_PersonalToken) isGitlabProvider_Provider() {}

type GiteaProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *GiteaProvider) Reset() {
	*x = GiteaProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiteaProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiteaProvider) ProtoMessage() {}

func (x *GiteaProvider) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiteaProvider.ProtoReflect.Descriptor instead.
func (*GiteaProvider) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{20}
}

func (x *GiteaProvider) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type BitbucketCloudProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	AppPassword string `protobuf:"bytes,2,opt,name=app_password,json=appPassword,proto3" json:"app_password,omitempty"`
}

func (x *BitbucketCloudProvider) Reset() {
	*x = BitbucketCloudProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitbucketCloudProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitbucketCloudProvider) ProtoMessage() {}

func (x *BitbucketCloudProvider) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitbucketCloudProvider.ProtoReflect.Descriptor instead.
func (*BitbucketCloudProvider) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{21}
}

func (x *BitbucketCloudProvider) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BitbucketCloudProvider) GetAppPassword() string {
	if x != nil {
		return x.AppPassword
	}
	return ""
}

type BitbucketServerProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username            string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	PersonalAccessToken string `protobuf:"bytes,2,opt,name=personal_access_token,json=personalAccessToken,proto3" json:"personal_access_token,omitempty"`
}

func (x *BitbucketServerProvider) Reset() {
	*x = BitbucketServerProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitbucketServerProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitbucketServerProvider) ProtoMessage() {}

func (x *BitbucketServerProvider) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitbucketServerProvider.ProtoReflect.Descriptor instead.
func (*BitbucketServerProvider) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{22}
}

func (x *BitbucketServerProvider) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BitbucketServerProvider) GetPersonalAccessToken() string {
	if x != nil {
		return x.PersonalAccessToken
	}
	return ""
}

type CodecommitProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKey string `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
}

func (x *CodecommitProvider) Reset() {
	*x = CodecommitProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodecommitProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecommitProvider) ProtoMessage() {}

func (x *CodecommitProvider) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecommitProvider.ProtoReflect.Descriptor instead.
func (*CodecommitProvider) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{23}
}

func (x *CodecommitProvider) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *CodecommitProvider) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type AzureProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonalAccessToken string `protobuf:"bytes,1,opt,name=personal_access_token,json=personalAccessToken,proto3" json:"personal_access_token,omitempty"`
	Organization        string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
	Project             string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *AzureProvider) Reset() {
	*x = AzureProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureProvider) ProtoMessage() {}

func (x *AzureProvider) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureProvider.ProtoReflect.Descriptor instead.
func (*AzureProvider) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{24}
}

func (x *AzureProvider) GetPersonalAccessToken() string {
	if x != nil {
		return x.PersonalAccessToken
	}
	return ""
}

func (x *AzureProvider) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *AzureProvider) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type Provider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Hook:
	//	*Provider_Github
	//	*Provider_Gitlab
	//	*Provider_Gitea
	//	*Provider_BitbucketCloud
	//	*Provider_BitbucketServer
	//	*Provider_Codecommit
	//	*Provider_Azure
	Hook       isProvider_Hook `protobuf_oneof:"hook"`
	Endpoint   string          `protobuf:"bytes,7,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	SkipVerify bool            `protobuf:"varint,8,opt,name=skipVerify,proto3" json:"skipVerify,omitempty"`
	Debug      bool            `protobuf:"varint,9,opt,name=debug,proto3" json:"debug,omitempty"`
	// If skipVerify is false, we can pass in a path of additional certs to allow
	// This might be useful in self hosted repositories which use self signed certs.
	AdditionalCertsPath string `protobuf:"bytes,10,opt,name=additional_certs_path,json=additionalCertsPath,proto3" json:"additional_certs_path,omitempty"`
}

func (x *Provider) Reset() {
	*x = Provider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provider) ProtoMessage() {}

func (x *Provider) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provider.ProtoReflect.Descriptor instead.
func (*Provider) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{25}
}

func (m *Provider) GetHook() isProvider_Hook {
	if m != nil {
		return m.Hook
	}
	return nil
}

func (x *Provider) GetGithub() *GithubProvider {
	if x, ok := x.GetHook().(*Provider_Github); ok {
		return x.Github
	}
	return nil
}

func (x *Provider) GetGitlab() *GitlabProvider {
	if x, ok := x.GetHook().(*Provider_Gitlab); ok {
		return x.Gitlab
	}
	return nil
}

func (x *Provider) GetGitea() *GiteaProvider {
	if x, ok := x.GetHook().(*Provider_Gitea); ok {
		return x.Gitea
	}
	return nil
}

func (x *Provider) GetBitbucketCloud() *BitbucketCloudProvider {
	if x, ok := x.GetHook().(*Provider_BitbucketCloud); ok {
		return x.BitbucketCloud
	}
	return nil
}

func (x *Provider) GetBitbucketServer() *BitbucketServerProvider {
	if x, ok := x.GetHook().(*Provider_BitbucketServer); ok {
		return x.BitbucketServer
	}
	return nil
}

func (x *Provider) GetCodecommit() *CodecommitProvider {
	if x, ok := x.GetHook().(*Provider_Codecommit); ok {
		return x.Codecommit
	}
	return nil
}

func (x *Provider) GetAzure() *AzureProvider {
	if x, ok := x.GetHook().(*Provider_Azure); ok {
		return x.Azure
	}
	return nil
}

func (x *Provider) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Provider) GetSkipVerify() bool {
	if x != nil {
		return x.SkipVerify
	}
	return false
}

func (x *Provider) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *Provider) GetAdditionalCertsPath() string {
	if x != nil {
		return x.AdditionalCertsPath
	}
	return ""
}

type isProvider_Hook interface {
	isProvider_Hook()
}

type Provider_Github struct {
	Github *GithubProvider `protobuf:"bytes,1,opt,name=github,proto3,oneof"`
}

type Provider_Gitlab struct {
	Gitlab *GitlabProvider `protobuf:"bytes,2,opt,name=gitlab,proto3,oneof"`
}

type Provider_Gitea struct {
	Gitea *GiteaProvider `protobuf:"bytes,3,opt,name=gitea,proto3,oneof"`
}

type Provider_BitbucketCloud struct {
	BitbucketCloud *BitbucketCloudProvider `protobuf:"bytes,4,opt,name=bitbucket_cloud,json=bitbucketCloud,proto3,oneof"`
}

type Provider_BitbucketServer struct {
	BitbucketServer *BitbucketServerProvider `protobuf:"bytes,5,opt,name=bitbucket_server,json=bitbucketServer,proto3,oneof"`
}

type Provider_Codecommit struct {
	Codecommit *CodecommitProvider `protobuf:"bytes,6,opt,name=codecommit,proto3,oneof"`
}

type Provider_Azure struct {
	Azure *AzureProvider `protobuf:"bytes,11,opt,name=azure,proto3,oneof"`
}

func (*Provider_Github) isProvider_Hook() {}

func (*Provider_Gitlab) isProvider_Hook() {}

func (*Provider_Gitea) isProvider_Hook() {}

func (*Provider_BitbucketCloud) isProvider_Hook() {}

func (*Provider_BitbucketServer) isProvider_Hook() {}

func (*Provider_Codecommit) isProvider_Hook() {}

func (*Provider_Azure) isProvider_Hook() {}

//
//For an invalid page request, next = 0
//For the last valid page response, next = 0
//For other cases, next = request.pageRequest.page + 1 // basically it corresponds to the next valid page
type PageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next    int32  `protobuf:"varint,1,opt,name=next,proto3" json:"next,omitempty"`
	NextUrl string `protobuf:"bytes,2,opt,name=next_url,json=nextUrl,proto3" json:"next_url,omitempty"`
}

func (x *PageResponse) Reset() {
	*x = PageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageResponse) ProtoMessage() {}

func (x *PageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageResponse.ProtoReflect.Descriptor instead.
func (*PageResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{26}
}

func (x *PageResponse) GetNext() int32 {
	if x != nil {
		return x.Next
	}
	return 0
}

func (x *PageResponse) GetNextUrl() string {
	if x != nil {
		return x.NextUrl
	}
	return ""
}

type PageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page int32  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *PageRequest) Reset() {
	*x = PageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageRequest) ProtoMessage() {}

func (x *PageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageRequest.ProtoReflect.Descriptor instead.
func (*PageRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{27}
}

func (x *PageRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type GetFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Types that are assignable to Type:
	//	*GetFileRequest_Branch
	//	*GetFileRequest_Ref
	Type     isGetFileRequest_Type `protobuf_oneof:"type"`
	Provider *Provider             `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *GetFileRequest) Reset() {
	*x = GetFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileRequest) ProtoMessage() {}

func (x *GetFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileRequest.ProtoReflect.Descriptor instead.
func (*GetFileRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{28}
}

func (x *GetFileRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *GetFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (m *GetFileRequest) GetType() isGetFileRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *GetFileRequest) GetBranch() string {
	if x, ok := x.GetType().(*GetFileRequest_Branch); ok {
		return x.Branch
	}
	return ""
}

func (x *GetFileRequest) GetRef() string {
	if x, ok := x.GetType().(*GetFileRequest_Ref); ok {
		return x.Ref
	}
	return ""
}

func (x *GetFileRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type isGetFileRequest_Type interface {
	isGetFileRequest_Type()
}

type GetFileRequest_Branch struct {
	Branch string `protobuf:"bytes,3,opt,name=branch,proto3,oneof"`
}

type GetFileRequest_Ref struct {
	Ref string `protobuf:"bytes,4,opt,name=ref,proto3,oneof"`
}

func (*GetFileRequest_Branch) isGetFileRequest_Type() {}

func (*GetFileRequest_Ref) isGetFileRequest_Type() {}

type GetBatchFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FindRequest []*GetFileRequest `protobuf:"bytes,1,rep,name=findRequest,proto3" json:"findRequest,omitempty"`
}

func (x *GetBatchFileRequest) Reset() {
	*x = GetBatchFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBatchFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchFileRequest) ProtoMessage() {}

func (x *GetBatchFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchFileRequest.ProtoReflect.Descriptor instead.
func (*GetBatchFileRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{29}
}

func (x *GetBatchFileRequest) GetFindRequest() []*GetFileRequest {
	if x != nil {
		return x.FindRequest
	}
	return nil
}

type GetLatestFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug     string    `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Path     string    `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Branch   string    `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	Provider *Provider `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *GetLatestFileRequest) Reset() {
	*x = GetLatestFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestFileRequest) ProtoMessage() {}

func (x *GetLatestFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestFileRequest.ProtoReflect.Descriptor instead.
func (*GetLatestFileRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{30}
}

func (x *GetLatestFileRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *GetLatestFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetLatestFileRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *GetLatestFileRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type DeleteFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug      string     `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Path      string     `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Branch    string     `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	Message   string     `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	CommitId  string     `protobuf:"bytes,5,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	BlobId    string     `protobuf:"bytes,6,opt,name=blob_id,json=blobId,proto3" json:"blob_id,omitempty"`
	Signature *Signature `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
	Provider  *Provider  `protobuf:"bytes,8,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *DeleteFileRequest) Reset() {
	*x = DeleteFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileRequest) ProtoMessage() {}

func (x *DeleteFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileRequest.ProtoReflect.Descriptor instead.
func (*DeleteFileRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteFileRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *DeleteFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DeleteFileRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *DeleteFileRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteFileRequest) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *DeleteFileRequest) GetBlobId() string {
	if x != nil {
		return x.BlobId
	}
	return ""
}

func (x *DeleteFileRequest) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *DeleteFileRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type DeleteFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error    string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	CommitId string `protobuf:"bytes,3,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	BlobId   string `protobuf:"bytes,4,opt,name=blob_id,json=blobId,proto3" json:"blob_id,omitempty"`
}

func (x *DeleteFileResponse) Reset() {
	*x = DeleteFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileResponse) ProtoMessage() {}

func (x *DeleteFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileResponse.ProtoReflect.Descriptor instead.
func (*DeleteFileResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteFileResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeleteFileResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *DeleteFileResponse) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *DeleteFileResponse) GetBlobId() string {
	if x != nil {
		return x.BlobId
	}
	return ""
}

type CreateFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error    string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	CommitId string `protobuf:"bytes,3,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	BlobId   string `protobuf:"bytes,4,opt,name=blob_id,json=blobId,proto3" json:"blob_id,omitempty"`
}

func (x *CreateFileResponse) Reset() {
	*x = CreateFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileResponse) ProtoMessage() {}

func (x *CreateFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileResponse.ProtoReflect.Descriptor instead.
func (*CreateFileResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{33}
}

func (x *CreateFileResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateFileResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CreateFileResponse) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *CreateFileResponse) GetBlobId() string {
	if x != nil {
		return x.BlobId
	}
	return ""
}

type UpdateFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error    string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	CommitId string `protobuf:"bytes,3,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	BlobId   string `protobuf:"bytes,4,opt,name=blob_id,json=blobId,proto3" json:"blob_id,omitempty"`
}

func (x *UpdateFileResponse) Reset() {
	*x = UpdateFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFileResponse) ProtoMessage() {}

func (x *UpdateFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFileResponse.ProtoReflect.Descriptor instead.
func (*UpdateFileResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateFileResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateFileResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *UpdateFileResponse) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *UpdateFileResponse) GetBlobId() string {
	if x != nil {
		return x.BlobId
	}
	return ""
}

type FileModifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug      string     `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Path      string     `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Branch    string     `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	Content   string     `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Message   string     `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	CommitId  string     `protobuf:"bytes,6,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	BlobId    string     `protobuf:"bytes,7,opt,name=blob_id,json=blobId,proto3" json:"blob_id,omitempty"`
	Signature *Signature `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
	Provider  *Provider  `protobuf:"bytes,9,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *FileModifyRequest) Reset() {
	*x = FileModifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileModifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileModifyRequest) ProtoMessage() {}

func (x *FileModifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileModifyRequest.ProtoReflect.Descriptor instead.
func (*FileModifyRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{35}
}

func (x *FileModifyRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *FileModifyRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileModifyRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *FileModifyRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *FileModifyRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FileModifyRequest) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *FileModifyRequest) GetBlobId() string {
	if x != nil {
		return x.BlobId
	}
	return ""
}

func (x *FileModifyRequest) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *FileModifyRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type FileContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content  string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Status   int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Path     string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	CommitId string `protobuf:"bytes,4,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	BlobId   string `protobuf:"bytes,5,opt,name=blob_id,json=blobId,proto3" json:"blob_id,omitempty"`
	Error    string `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FileContent) Reset() {
	*x = FileContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileContent) ProtoMessage() {}

func (x *FileContent) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileContent.ProtoReflect.Descriptor instead.
func (*FileContent) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{36}
}

func (x *FileContent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *FileContent) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FileContent) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileContent) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *FileContent) GetBlobId() string {
	if x != nil {
		return x.BlobId
	}
	return ""
}

func (x *FileContent) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FileBatchContentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileContents []*FileContent `protobuf:"bytes,1,rep,name=file_contents,json=fileContents,proto3" json:"file_contents,omitempty"`
}

func (x *FileBatchContentResponse) Reset() {
	*x = FileBatchContentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileBatchContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileBatchContentResponse) ProtoMessage() {}

func (x *FileBatchContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileBatchContentResponse.ProtoReflect.Descriptor instead.
func (*FileBatchContentResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{37}
}

func (x *FileBatchContentResponse) GetFileContents() []*FileContent {
	if x != nil {
		return x.FileContents
	}
	return nil
}

type FindFilesInBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	// Types that are assignable to Type:
	//	*FindFilesInBranchRequest_Branch
	//	*FindFilesInBranchRequest_Ref
	Type       isFindFilesInBranchRequest_Type `protobuf_oneof:"type"`
	Path       string                          `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Pagination *PageRequest                    `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Provider   *Provider                       `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *FindFilesInBranchRequest) Reset() {
	*x = FindFilesInBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFilesInBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFilesInBranchRequest) ProtoMessage() {}

func (x *FindFilesInBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFilesInBranchRequest.ProtoReflect.Descriptor instead.
func (*FindFilesInBranchRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{38}
}

func (x *FindFilesInBranchRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (m *FindFilesInBranchRequest) GetType() isFindFilesInBranchRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *FindFilesInBranchRequest) GetBranch() string {
	if x, ok := x.GetType().(*FindFilesInBranchRequest_Branch); ok {
		return x.Branch
	}
	return ""
}

func (x *FindFilesInBranchRequest) GetRef() string {
	if x, ok := x.GetType().(*FindFilesInBranchRequest_Ref); ok {
		return x.Ref
	}
	return ""
}

func (x *FindFilesInBranchRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FindFilesInBranchRequest) GetPagination() *PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *FindFilesInBranchRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type isFindFilesInBranchRequest_Type interface {
	isFindFilesInBranchRequest_Type()
}

type FindFilesInBranchRequest_Branch struct {
	Branch string `protobuf:"bytes,2,opt,name=branch,proto3,oneof"`
}

type FindFilesInBranchRequest_Ref struct {
	Ref string `protobuf:"bytes,6,opt,name=ref,proto3,oneof"`
}

func (*FindFilesInBranchRequest_Branch) isFindFilesInBranchRequest_Type() {}

func (*FindFilesInBranchRequest_Ref) isFindFilesInBranchRequest_Type() {}

type FindFilesInBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File       []*FileChange `protobuf:"bytes,1,rep,name=file,proto3" json:"file,omitempty"`
	Pagination *PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *FindFilesInBranchResponse) Reset() {
	*x = FindFilesInBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFilesInBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFilesInBranchResponse) ProtoMessage() {}

func (x *FindFilesInBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFilesInBranchResponse.ProtoReflect.Descriptor instead.
func (*FindFilesInBranchResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{39}
}

func (x *FindFilesInBranchResponse) GetFile() []*FileChange {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *FindFilesInBranchResponse) GetPagination() *PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type FindFilesInCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug       string       `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Ref        string       `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	Path       string       `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Pagination *PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Provider   *Provider    `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *FindFilesInCommitRequest) Reset() {
	*x = FindFilesInCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFilesInCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFilesInCommitRequest) ProtoMessage() {}

func (x *FindFilesInCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFilesInCommitRequest.ProtoReflect.Descriptor instead.
func (*FindFilesInCommitRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{40}
}

func (x *FindFilesInCommitRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *FindFilesInCommitRequest) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *FindFilesInCommitRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FindFilesInCommitRequest) GetPagination() *PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *FindFilesInCommitRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type FindFilesInCommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File       []*FileChange `protobuf:"bytes,1,rep,name=file,proto3" json:"file,omitempty"`
	Pagination *PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *FindFilesInCommitResponse) Reset() {
	*x = FindFilesInCommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFilesInCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFilesInCommitResponse) ProtoMessage() {}

func (x *FindFilesInCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFilesInCommitResponse.ProtoReflect.Descriptor instead.
func (*FindFilesInCommitResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{41}
}

func (x *FindFilesInCommitResponse) GetFile() []*FileChange {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *FindFilesInCommitResponse) GetPagination() *PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type FileChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path        string      `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	ContentType ContentType `protobuf:"varint,2,opt,name=content_type,json=contentType,proto3,enum=io.harness.product.ci.scm.proto.ContentType" json:"content_type,omitempty"`
	CommitId    string      `protobuf:"bytes,3,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	BlobId      string      `protobuf:"bytes,4,opt,name=blob_id,json=blobId,proto3" json:"blob_id,omitempty"`
}

func (x *FileChange) Reset() {
	*x = FileChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChange) ProtoMessage() {}

func (x *FileChange) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChange.ProtoReflect.Descriptor instead.
func (*FileChange) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{42}
}

func (x *FileChange) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileChange) GetContentType() ContentType {
	if x != nil {
		return x.ContentType
	}
	return ContentType_UNKNOWN_CONTENT
}

func (x *FileChange) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *FileChange) GetBlobId() string {
	if x != nil {
		return x.BlobId
	}
	return ""
}

type IsLatestFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Types that are assignable to Type:
	//	*IsLatestFileRequest_Branch
	//	*IsLatestFileRequest_Ref
	Type     isIsLatestFileRequest_Type `protobuf_oneof:"type"`
	CommitId string                     `protobuf:"bytes,5,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	BlobId   string                     `protobuf:"bytes,6,opt,name=blob_id,json=blobId,proto3" json:"blob_id,omitempty"`
	Provider *Provider                  `protobuf:"bytes,7,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *IsLatestFileRequest) Reset() {
	*x = IsLatestFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsLatestFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLatestFileRequest) ProtoMessage() {}

func (x *IsLatestFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLatestFileRequest.ProtoReflect.Descriptor instead.
func (*IsLatestFileRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{43}
}

func (x *IsLatestFileRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *IsLatestFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (m *IsLatestFileRequest) GetType() isIsLatestFileRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *IsLatestFileRequest) GetBranch() string {
	if x, ok := x.GetType().(*IsLatestFileRequest_Branch); ok {
		return x.Branch
	}
	return ""
}

func (x *IsLatestFileRequest) GetRef() string {
	if x, ok := x.GetType().(*IsLatestFileRequest_Ref); ok {
		return x.Ref
	}
	return ""
}

func (x *IsLatestFileRequest) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *IsLatestFileRequest) GetBlobId() string {
	if x != nil {
		return x.BlobId
	}
	return ""
}

func (x *IsLatestFileRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type isIsLatestFileRequest_Type interface {
	isIsLatestFileRequest_Type()
}

type IsLatestFileRequest_Branch struct {
	Branch string `protobuf:"bytes,3,opt,name=branch,proto3,oneof"`
}

type IsLatestFileRequest_Ref struct {
	Ref string `protobuf:"bytes,4,opt,name=ref,proto3,oneof"`
}

func (*IsLatestFileRequest_Branch) isIsLatestFileRequest_Type() {}

func (*IsLatestFileRequest_Ref) isIsLatestFileRequest_Type() {}

type IsLatestFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latest bool `protobuf:"varint,1,opt,name=latest,proto3" json:"latest,omitempty"`
}

func (x *IsLatestFileResponse) Reset() {
	*x = IsLatestFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsLatestFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLatestFileResponse) ProtoMessage() {}

func (x *IsLatestFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLatestFileResponse.ProtoReflect.Descriptor instead.
func (*IsLatestFileResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{44}
}

func (x *IsLatestFileResponse) GetLatest() bool {
	if x != nil {
		return x.Latest
	}
	return false
}

type CreatePRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug     string    `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Title    string    `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Body     string    `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	Source   string    `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	Target   string    `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
	Provider *Provider `protobuf:"bytes,6,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *CreatePRRequest) Reset() {
	*x = CreatePRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePRRequest) ProtoMessage() {}

func (x *CreatePRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePRRequest.ProtoReflect.Descriptor instead.
func (*CreatePRRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{45}
}

func (x *CreatePRRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *CreatePRRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreatePRRequest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *CreatePRRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CreatePRRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *CreatePRRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type CreatePRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Number int32  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Error  string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CreatePRResponse) Reset() {
	*x = CreatePRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePRResponse) ProtoMessage() {}

func (x *CreatePRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePRResponse.ProtoReflect.Descriptor instead.
func (*CreatePRResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{46}
}

func (x *CreatePRResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreatePRResponse) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *CreatePRResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FindFilesInPRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug       string       `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Number     int32        `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Pagination *PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Provider   *Provider    `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *FindFilesInPRRequest) Reset() {
	*x = FindFilesInPRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFilesInPRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFilesInPRRequest) ProtoMessage() {}

func (x *FindFilesInPRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFilesInPRRequest.ProtoReflect.Descriptor instead.
func (*FindFilesInPRRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{47}
}

func (x *FindFilesInPRRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *FindFilesInPRRequest) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *FindFilesInPRRequest) GetPagination() *PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *FindFilesInPRRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type PRFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path         string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Added        bool   `protobuf:"varint,2,opt,name=added,proto3" json:"added,omitempty"`
	Renamed      bool   `protobuf:"varint,3,opt,name=renamed,proto3" json:"renamed,omitempty"`
	Deleted      bool   `protobuf:"varint,4,opt,name=deleted,proto3" json:"deleted,omitempty"`
	PrevFilePath string `protobuf:"bytes,5,opt,name=prev_file_path,json=prevFilePath,proto3" json:"prev_file_path,omitempty"`
}

func (x *PRFile) Reset() {
	*x = PRFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRFile) ProtoMessage() {}

func (x *PRFile) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRFile.ProtoReflect.Descriptor instead.
func (*PRFile) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{48}
}

func (x *PRFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PRFile) GetAdded() bool {
	if x != nil {
		return x.Added
	}
	return false
}

func (x *PRFile) GetRenamed() bool {
	if x != nil {
		return x.Renamed
	}
	return false
}

func (x *PRFile) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

func (x *PRFile) GetPrevFilePath() string {
	if x != nil {
		return x.PrevFilePath
	}
	return ""
}

type FindFilesInPRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files      []*PRFile     `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	Pagination *PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *FindFilesInPRResponse) Reset() {
	*x = FindFilesInPRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindFilesInPRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindFilesInPRResponse) ProtoMessage() {}

func (x *FindFilesInPRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindFilesInPRResponse.ProtoReflect.Descriptor instead.
func (*FindFilesInPRResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{49}
}

func (x *FindFilesInPRResponse) GetFiles() []*PRFile {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *FindFilesInPRResponse) GetPagination() *PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type CreateBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug     string    `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Name     string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CommitId string    `protobuf:"bytes,3,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	Provider *Provider `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *CreateBranchRequest) Reset() {
	*x = CreateBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBranchRequest) ProtoMessage() {}

func (x *CreateBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBranchRequest.ProtoReflect.Descriptor instead.
func (*CreateBranchRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{50}
}

func (x *CreateBranchRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *CreateBranchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateBranchRequest) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *CreateBranchRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type CreateBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CreateBranchResponse) Reset() {
	*x = CreateBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBranchResponse) ProtoMessage() {}

func (x *CreateBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBranchResponse.ProtoReflect.Descriptor instead.
func (*CreateBranchResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{51}
}

func (x *CreateBranchResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateBranchResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type GetLatestCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	// Types that are assignable to Type:
	//	*GetLatestCommitRequest_Branch
	//	*GetLatestCommitRequest_Ref
	Type     isGetLatestCommitRequest_Type `protobuf_oneof:"type"`
	Provider *Provider                     `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *GetLatestCommitRequest) Reset() {
	*x = GetLatestCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestCommitRequest) ProtoMessage() {}

func (x *GetLatestCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestCommitRequest.ProtoReflect.Descriptor instead.
func (*GetLatestCommitRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{52}
}

func (x *GetLatestCommitRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (m *GetLatestCommitRequest) GetType() isGetLatestCommitRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *GetLatestCommitRequest) GetBranch() string {
	if x, ok := x.GetType().(*GetLatestCommitRequest_Branch); ok {
		return x.Branch
	}
	return ""
}

func (x *GetLatestCommitRequest) GetRef() string {
	if x, ok := x.GetType().(*GetLatestCommitRequest_Ref); ok {
		return x.Ref
	}
	return ""
}

func (x *GetLatestCommitRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type isGetLatestCommitRequest_Type interface {
	isGetLatestCommitRequest_Type()
}

type GetLatestCommitRequest_Branch struct {
	Branch string `protobuf:"bytes,2,opt,name=branch,proto3,oneof"`
}

type GetLatestCommitRequest_Ref struct {
	Ref string `protobuf:"bytes,4,opt,name=ref,proto3,oneof"`
}

func (*GetLatestCommitRequest_Branch) isGetLatestCommitRequest_Type() {}

func (*GetLatestCommitRequest_Ref) isGetLatestCommitRequest_Type() {}

type GetLatestCommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitId string  `protobuf:"bytes,1,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	Status   int32   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Error    string  `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Commit   *Commit `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *GetLatestCommitResponse) Reset() {
	*x = GetLatestCommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestCommitResponse) ProtoMessage() {}

func (x *GetLatestCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestCommitResponse.ProtoReflect.Descriptor instead.
func (*GetLatestCommitResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{53}
}

func (x *GetLatestCommitResponse) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *GetLatestCommitResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetLatestCommitResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetLatestCommitResponse) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

type ListBranchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug       string       `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Pagination *PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Provider   *Provider    `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *ListBranchesRequest) Reset() {
	*x = ListBranchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBranchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBranchesRequest) ProtoMessage() {}

func (x *ListBranchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBranchesRequest.ProtoReflect.Descriptor instead.
func (*ListBranchesRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{54}
}

func (x *ListBranchesRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ListBranchesRequest) GetPagination() *PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListBranchesRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type ListBranchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branches   []string      `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
	Pagination *PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Status     int32         `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Error      string        `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ListBranchesResponse) Reset() {
	*x = ListBranchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBranchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBranchesResponse) ProtoMessage() {}

func (x *ListBranchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBranchesResponse.ProtoReflect.Descriptor instead.
func (*ListBranchesResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{55}
}

func (x *ListBranchesResponse) GetBranches() []string {
	if x != nil {
		return x.Branches
	}
	return nil
}

func (x *ListBranchesResponse) GetPagination() *PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListBranchesResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ListBranchesResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type CompareCommitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug       string       `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Source     string       `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Target     string       `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Pagination *PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Provider   *Provider    `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *CompareCommitsRequest) Reset() {
	*x = CompareCommitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareCommitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareCommitsRequest) ProtoMessage() {}

func (x *CompareCommitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareCommitsRequest.ProtoReflect.Descriptor instead.
func (*CompareCommitsRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{56}
}

func (x *CompareCommitsRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *CompareCommitsRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CompareCommitsRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *CompareCommitsRequest) GetPagination() *PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *CompareCommitsRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type CompareCommitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files      []*PRFile     `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	Pagination *PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *CompareCommitsResponse) Reset() {
	*x = CompareCommitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareCommitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareCommitsResponse) ProtoMessage() {}

func (x *CompareCommitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareCommitsResponse.ProtoReflect.Descriptor instead.
func (*CompareCommitsResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{57}
}

func (x *CompareCommitsResponse) GetFiles() []*PRFile {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *CompareCommitsResponse) GetPagination() *PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListCommitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	// Types that are assignable to Type:
	//	*ListCommitsRequest_Branch
	//	*ListCommitsRequest_Ref
	Type       isListCommitsRequest_Type `protobuf_oneof:"type"`
	Pagination *PageRequest              `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Provider   *Provider                 `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	FilePath   string                    `protobuf:"bytes,6,opt,name=filePath,proto3" json:"filePath,omitempty"`
}

func (x *ListCommitsRequest) Reset() {
	*x = ListCommitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitsRequest) ProtoMessage() {}

func (x *ListCommitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitsRequest.ProtoReflect.Descriptor instead.
func (*ListCommitsRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{58}
}

func (x *ListCommitsRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (m *ListCommitsRequest) GetType() isListCommitsRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ListCommitsRequest) GetBranch() string {
	if x, ok := x.GetType().(*ListCommitsRequest_Branch); ok {
		return x.Branch
	}
	return ""
}

func (x *ListCommitsRequest) GetRef() string {
	if x, ok := x.GetType().(*ListCommitsRequest_Ref); ok {
		return x.Ref
	}
	return ""
}

func (x *ListCommitsRequest) GetPagination() *PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListCommitsRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *ListCommitsRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type isListCommitsRequest_Type interface {
	isListCommitsRequest_Type()
}

type ListCommitsRequest_Branch struct {
	Branch string `protobuf:"bytes,2,opt,name=branch,proto3,oneof"`
}

type ListCommitsRequest_Ref struct {
	Ref string `protobuf:"bytes,3,opt,name=ref,proto3,oneof"`
}

func (*ListCommitsRequest_Branch) isListCommitsRequest_Type() {}

func (*ListCommitsRequest_Ref) isListCommitsRequest_Type() {}

type ListCommitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitIds  []string      `protobuf:"bytes,1,rep,name=commit_ids,json=commitIds,proto3" json:"commit_ids,omitempty"`
	Pagination *PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListCommitsResponse) Reset() {
	*x = ListCommitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitsResponse) ProtoMessage() {}

func (x *ListCommitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitsResponse.ProtoReflect.Descriptor instead.
func (*ListCommitsResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{59}
}

func (x *ListCommitsResponse) GetCommitIds() []string {
	if x != nil {
		return x.CommitIds
	}
	return nil
}

func (x *ListCommitsResponse) GetPagination() *PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetLatestCommitOnFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug     string    `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Branch   string    `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Provider *Provider `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	FilePath string    `protobuf:"bytes,4,opt,name=filePath,proto3" json:"filePath,omitempty"`
}

func (x *GetLatestCommitOnFileRequest) Reset() {
	*x = GetLatestCommitOnFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestCommitOnFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestCommitOnFileRequest) ProtoMessage() {}

func (x *GetLatestCommitOnFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestCommitOnFileRequest.ProtoReflect.Descriptor instead.
func (*GetLatestCommitOnFileRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{60}
}

func (x *GetLatestCommitOnFileRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *GetLatestCommitOnFileRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *GetLatestCommitOnFileRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *GetLatestCommitOnFileRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type GetLatestCommitOnFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitId string `protobuf:"bytes,1,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	Error    string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetLatestCommitOnFileResponse) Reset() {
	*x = GetLatestCommitOnFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestCommitOnFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestCommitOnFileResponse) ProtoMessage() {}

func (x *GetLatestCommitOnFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestCommitOnFileResponse.ProtoReflect.Descriptor instead.
func (*GetLatestCommitOnFileResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{61}
}

func (x *GetLatestCommitOnFileResponse) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *GetLatestCommitOnFileResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ListCommitsInPRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug       string       `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Number     int64        `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Pagination *PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Provider   *Provider    `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *ListCommitsInPRRequest) Reset() {
	*x = ListCommitsInPRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitsInPRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitsInPRRequest) ProtoMessage() {}

func (x *ListCommitsInPRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitsInPRRequest.ProtoReflect.Descriptor instead.
func (*ListCommitsInPRRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{62}
}

func (x *ListCommitsInPRRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ListCommitsInPRRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ListCommitsInPRRequest) GetPagination() *PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListCommitsInPRRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type ListCommitsInPRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commits    []*Commit     `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
	Pagination *PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListCommitsInPRResponse) Reset() {
	*x = ListCommitsInPRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommitsInPRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitsInPRResponse) ProtoMessage() {}

func (x *ListCommitsInPRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitsInPRResponse.ProtoReflect.Descriptor instead.
func (*ListCommitsInPRResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{63}
}

func (x *ListCommitsInPRResponse) GetCommits() []*Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *ListCommitsInPRResponse) GetPagination() *PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GithubWebhookEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []GithubWebhookEvent `protobuf:"varint,1,rep,packed,name=events,proto3,enum=io.harness.product.ci.scm.proto.GithubWebhookEvent" json:"events,omitempty"`
}

func (x *GithubWebhookEvents) Reset() {
	*x = GithubWebhookEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubWebhookEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubWebhookEvents) ProtoMessage() {}

func (x *GithubWebhookEvents) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubWebhookEvents.ProtoReflect.Descriptor instead.
func (*GithubWebhookEvents) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{64}
}

func (x *GithubWebhookEvents) GetEvents() []GithubWebhookEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type GitlabWebhookEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []GitlabWebhookEvent `protobuf:"varint,1,rep,packed,name=events,proto3,enum=io.harness.product.ci.scm.proto.GitlabWebhookEvent" json:"events,omitempty"`
}

func (x *GitlabWebhookEvents) Reset() {
	*x = GitlabWebhookEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitlabWebhookEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabWebhookEvents) ProtoMessage() {}

func (x *GitlabWebhookEvents) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabWebhookEvents.ProtoReflect.Descriptor instead.
func (*GitlabWebhookEvents) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{65}
}

func (x *GitlabWebhookEvents) GetEvents() []GitlabWebhookEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type BitbucketCloudWebhookEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []BitbucketCloudWebhookEvent `protobuf:"varint,1,rep,packed,name=events,proto3,enum=io.harness.product.ci.scm.proto.BitbucketCloudWebhookEvent" json:"events,omitempty"`
}

func (x *BitbucketCloudWebhookEvents) Reset() {
	*x = BitbucketCloudWebhookEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitbucketCloudWebhookEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitbucketCloudWebhookEvents) ProtoMessage() {}

func (x *BitbucketCloudWebhookEvents) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitbucketCloudWebhookEvents.ProtoReflect.Descriptor instead.
func (*BitbucketCloudWebhookEvents) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{66}
}

func (x *BitbucketCloudWebhookEvents) GetEvents() []BitbucketCloudWebhookEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type BitbucketServerWebhookEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []BitbucketServerWebhookEvent `protobuf:"varint,1,rep,packed,name=events,proto3,enum=io.harness.product.ci.scm.proto.BitbucketServerWebhookEvent" json:"events,omitempty"`
}

func (x *BitbucketServerWebhookEvents) Reset() {
	*x = BitbucketServerWebhookEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitbucketServerWebhookEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitbucketServerWebhookEvents) ProtoMessage() {}

func (x *BitbucketServerWebhookEvents) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitbucketServerWebhookEvents.ProtoReflect.Descriptor instead.
func (*BitbucketServerWebhookEvents) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{67}
}

func (x *BitbucketServerWebhookEvents) GetEvents() []BitbucketServerWebhookEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type AzureWebhookEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Azure only allows one event type per hook
	Events AzureWebhookEvent `protobuf:"varint,1,opt,name=events,proto3,enum=io.harness.product.ci.scm.proto.AzureWebhookEvent" json:"events,omitempty"`
}

func (x *AzureWebhookEvents) Reset() {
	*x = AzureWebhookEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureWebhookEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureWebhookEvents) ProtoMessage() {}

func (x *AzureWebhookEvents) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureWebhookEvents.ProtoReflect.Descriptor instead.
func (*AzureWebhookEvents) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{68}
}

func (x *AzureWebhookEvents) GetEvents() AzureWebhookEvent {
	if x != nil {
		return x.Events
	}
	return AzureWebhookEvent_AZURE_PUSH
}

type NativeEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to NativeEvents:
	//	*NativeEvents_Github
	//	*NativeEvents_Gitlab
	//	*NativeEvents_BitbucketCloud
	//	*NativeEvents_BitbucketServer
	//	*NativeEvents_Azure
	NativeEvents isNativeEvents_NativeEvents `protobuf_oneof:"nativeEvents"`
}

func (x *NativeEvents) Reset() {
	*x = NativeEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeEvents) ProtoMessage() {}

func (x *NativeEvents) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeEvents.ProtoReflect.Descriptor instead.
func (*NativeEvents) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{69}
}

func (m *NativeEvents) GetNativeEvents() isNativeEvents_NativeEvents {
	if m != nil {
		return m.NativeEvents
	}
	return nil
}

func (x *NativeEvents) GetGithub() *GithubWebhookEvents {
	if x, ok := x.GetNativeEvents().(*NativeEvents_Github); ok {
		return x.Github
	}
	return nil
}

func (x *NativeEvents) GetGitlab() *GitlabWebhookEvents {
	if x, ok := x.GetNativeEvents().(*NativeEvents_Gitlab); ok {
		return x.Gitlab
	}
	return nil
}

func (x *NativeEvents) GetBitbucketCloud() *BitbucketCloudWebhookEvents {
	if x, ok := x.GetNativeEvents().(*NativeEvents_BitbucketCloud); ok {
		return x.BitbucketCloud
	}
	return nil
}

func (x *NativeEvents) GetBitbucketServer() *BitbucketServerWebhookEvents {
	if x, ok := x.GetNativeEvents().(*NativeEvents_BitbucketServer); ok {
		return x.BitbucketServer
	}
	return nil
}

func (x *NativeEvents) GetAzure() *AzureWebhookEvents {
	if x, ok := x.GetNativeEvents().(*NativeEvents_Azure); ok {
		return x.Azure
	}
	return nil
}

type isNativeEvents_NativeEvents interface {
	isNativeEvents_NativeEvents()
}

type NativeEvents_Github struct {
	Github *GithubWebhookEvents `protobuf:"bytes,1,opt,name=github,proto3,oneof"`
}

type NativeEvents_Gitlab struct {
	Gitlab *GitlabWebhookEvents `protobuf:"bytes,2,opt,name=gitlab,proto3,oneof"`
}

type NativeEvents_BitbucketCloud struct {
	BitbucketCloud *BitbucketCloudWebhookEvents `protobuf:"bytes,3,opt,name=bitbucket_cloud,json=bitbucketCloud,proto3,oneof"`
}

type NativeEvents_BitbucketServer struct {
	BitbucketServer *BitbucketServerWebhookEvents `protobuf:"bytes,4,opt,name=bitbucket_server,json=bitbucketServer,proto3,oneof"`
}

type NativeEvents_Azure struct {
	Azure *AzureWebhookEvents `protobuf:"bytes,5,opt,name=azure,proto3,oneof"`
}

func (*NativeEvents_Github) isNativeEvents_NativeEvents() {}

func (*NativeEvents_Gitlab) isNativeEvents_NativeEvents() {}

func (*NativeEvents_BitbucketCloud) isNativeEvents_NativeEvents() {}

func (*NativeEvents_BitbucketServer) isNativeEvents_NativeEvents() {}

func (*NativeEvents_Azure) isNativeEvents_NativeEvents() {}

type CreateWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug         string        `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Name         string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Target       string        `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Secret       string        `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
	NativeEvents *NativeEvents `protobuf:"bytes,5,opt,name=nativeEvents,proto3" json:"nativeEvents,omitempty"`
	SkipVerify   bool          `protobuf:"varint,6,opt,name=skipVerify,proto3" json:"skipVerify,omitempty"`
	Provider     *Provider     `protobuf:"bytes,7,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *CreateWebhookRequest) Reset() {
	*x = CreateWebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWebhookRequest) ProtoMessage() {}

func (x *CreateWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWebhookRequest.ProtoReflect.Descriptor instead.
func (*CreateWebhookRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{70}
}

func (x *CreateWebhookRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *CreateWebhookRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateWebhookRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *CreateWebhookRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *CreateWebhookRequest) GetNativeEvents() *NativeEvents {
	if x != nil {
		return x.NativeEvents
	}
	return nil
}

func (x *CreateWebhookRequest) GetSkipVerify() bool {
	if x != nil {
		return x.SkipVerify
	}
	return false
}

func (x *CreateWebhookRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type WebhookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Target       string        `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	NativeEvents *NativeEvents `protobuf:"bytes,4,opt,name=nativeEvents,proto3" json:"nativeEvents,omitempty"`
	Active       bool          `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	SkipVerify   bool          `protobuf:"varint,6,opt,name=skipVerify,proto3" json:"skipVerify,omitempty"`
}

func (x *WebhookResponse) Reset() {
	*x = WebhookResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookResponse) ProtoMessage() {}

func (x *WebhookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookResponse.ProtoReflect.Descriptor instead.
func (*WebhookResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{71}
}

func (x *WebhookResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WebhookResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WebhookResponse) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *WebhookResponse) GetNativeEvents() *NativeEvents {
	if x != nil {
		return x.NativeEvents
	}
	return nil
}

func (x *WebhookResponse) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *WebhookResponse) GetSkipVerify() bool {
	if x != nil {
		return x.SkipVerify
	}
	return false
}

type CreateWebhookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Webhook *WebhookResponse `protobuf:"bytes,1,opt,name=webhook,proto3" json:"webhook,omitempty"`
	Status  int32            `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Error   string           `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CreateWebhookResponse) Reset() {
	*x = CreateWebhookResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWebhookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWebhookResponse) ProtoMessage() {}

func (x *CreateWebhookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWebhookResponse.ProtoReflect.Descriptor instead.
func (*CreateWebhookResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{72}
}

func (x *CreateWebhookResponse) GetWebhook() *WebhookResponse {
	if x != nil {
		return x.Webhook
	}
	return nil
}

func (x *CreateWebhookResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateWebhookResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeleteWebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug     string    `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Id       string    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Provider *Provider `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *DeleteWebhookRequest) Reset() {
	*x = DeleteWebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWebhookRequest) ProtoMessage() {}

func (x *DeleteWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWebhookRequest.ProtoReflect.Descriptor instead.
func (*DeleteWebhookRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{73}
}

func (x *DeleteWebhookRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *DeleteWebhookRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteWebhookRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type DeleteWebhookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeleteWebhookResponse) Reset() {
	*x = DeleteWebhookResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWebhookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWebhookResponse) ProtoMessage() {}

func (x *DeleteWebhookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWebhookResponse.ProtoReflect.Descriptor instead.
func (*DeleteWebhookResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{74}
}

func (x *DeleteWebhookResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeleteWebhookResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ListWebhooksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug       string       `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Pagination *PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Provider   *Provider    `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *ListWebhooksRequest) Reset() {
	*x = ListWebhooksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWebhooksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWebhooksRequest) ProtoMessage() {}

func (x *ListWebhooksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWebhooksRequest.ProtoReflect.Descriptor instead.
func (*ListWebhooksRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{75}
}

func (x *ListWebhooksRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ListWebhooksRequest) GetPagination() *PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListWebhooksRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type ListWebhooksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Webhooks   []*WebhookResponse `protobuf:"bytes,1,rep,name=webhooks,proto3" json:"webhooks,omitempty"`
	Status     int32              `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Error      string             `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Pagination *PageResponse      `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListWebhooksResponse) Reset() {
	*x = ListWebhooksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWebhooksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWebhooksResponse) ProtoMessage() {}

func (x *ListWebhooksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWebhooksResponse.ProtoReflect.Descriptor instead.
func (*ListWebhooksResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{76}
}

func (x *ListWebhooksResponse) GetWebhooks() []*WebhookResponse {
	if x != nil {
		return x.Webhooks
	}
	return nil
}

func (x *ListWebhooksResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ListWebhooksResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ListWebhooksResponse) GetPagination() *PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetAuthenticatedUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider *Provider `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *GetAuthenticatedUserRequest) Reset() {
	*x = GetAuthenticatedUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthenticatedUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthenticatedUserRequest) ProtoMessage() {}

func (x *GetAuthenticatedUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthenticatedUserRequest.ProtoReflect.Descriptor instead.
func (*GetAuthenticatedUserRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{77}
}

func (x *GetAuthenticatedUserRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type GetAuthenticatedUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Error    string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetAuthenticatedUserResponse) Reset() {
	*x = GetAuthenticatedUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthenticatedUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthenticatedUserResponse) ProtoMessage() {}

func (x *GetAuthenticatedUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthenticatedUserResponse.ProtoReflect.Descriptor instead.
func (*GetAuthenticatedUserResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{78}
}

func (x *GetAuthenticatedUserResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetAuthenticatedUserResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type GetUserReposRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Provider   *Provider    `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *GetUserReposRequest) Reset() {
	*x = GetUserReposRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserReposRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserReposRequest) ProtoMessage() {}

func (x *GetUserReposRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserReposRequest.ProtoReflect.Descriptor instead.
func (*GetUserReposRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{79}
}

func (x *GetUserReposRequest) GetPagination() *PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetUserReposRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type GetUserReposResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repos      []*Repository `protobuf:"bytes,1,rep,name=repos,proto3" json:"repos,omitempty"`
	Pagination *PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Status     int32         `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Error      string        `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetUserReposResponse) Reset() {
	*x = GetUserReposResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserReposResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserReposResponse) ProtoMessage() {}

func (x *GetUserReposResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserReposResponse.ProtoReflect.Descriptor instead.
func (*GetUserReposResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{80}
}

func (x *GetUserReposResponse) GetRepos() []*Repository {
	if x != nil {
		return x.Repos
	}
	return nil
}

func (x *GetUserReposResponse) GetPagination() *PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetUserReposResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetUserReposResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type GetUserRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug     string    `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Provider *Provider `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *GetUserRepoRequest) Reset() {
	*x = GetUserRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRepoRequest) ProtoMessage() {}

func (x *GetUserRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRepoRequest.ProtoReflect.Descriptor instead.
func (*GetUserRepoRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{81}
}

func (x *GetUserRepoRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *GetUserRepoRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type GetUserRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo   *Repository `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Status int32       `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Error  string      `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetUserRepoResponse) Reset() {
	*x = GetUserRepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRepoResponse) ProtoMessage() {}

func (x *GetUserRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRepoResponse.ProtoReflect.Descriptor instead.
func (*GetUserRepoResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{82}
}

func (x *GetUserRepoResponse) GetRepo() *Repository {
	if x != nil {
		return x.Repo
	}
	return nil
}

func (x *GetUserRepoResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetUserRepoResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FindPRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number   int64     `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Slug     string    `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	Provider *Provider `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *FindPRRequest) Reset() {
	*x = FindPRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPRRequest) ProtoMessage() {}

func (x *FindPRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPRRequest.ProtoReflect.Descriptor instead.
func (*FindPRRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{83}
}

func (x *FindPRRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *FindPRRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *FindPRRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type FindCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug     string    `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Ref      string    `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	Provider *Provider `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *FindCommitRequest) Reset() {
	*x = FindCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCommitRequest) ProtoMessage() {}

func (x *FindCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCommitRequest.ProtoReflect.Descriptor instead.
func (*FindCommitRequest) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{84}
}

func (x *FindCommitRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *FindCommitRequest) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *FindCommitRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type FindPRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pr     *PullRequest `protobuf:"bytes,1,opt,name=pr,proto3" json:"pr,omitempty"`
	Status int32        `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Error  string       `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FindPRResponse) Reset() {
	*x = FindPRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPRResponse) ProtoMessage() {}

func (x *FindPRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPRResponse.ProtoReflect.Descriptor instead.
func (*FindPRResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{85}
}

func (x *FindPRResponse) GetPr() *PullRequest {
	if x != nil {
		return x.Pr
	}
	return nil
}

func (x *FindPRResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FindPRResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FindCommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error  string  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Commit *Commit `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *FindCommitResponse) Reset() {
	*x = FindCommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCommitResponse) ProtoMessage() {}

func (x *FindCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCommitResponse.ProtoReflect.Descriptor instead.
func (*FindCommitResponse) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{86}
}

func (x *FindCommitResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FindCommitResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FindCommitResponse) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

type Header_Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Header_Pair) Reset() {
	*x = Header_Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scm_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header_Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header_Pair) ProtoMessage() {}

func (x *Header_Pair) ProtoReflect() protoreflect.Message {
	mi := &file_scm_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header_Pair.ProtoReflect.Descriptor instead.
func (*Header_Pair) Descriptor() ([]byte, []int) {
	return file_scm_proto_rawDescGZIP(), []int{14, 0}
}

func (x *Header_Pair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Header_Pair) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_scm_proto protoreflect.FileDescriptor

var file_scm_proto_rawDesc = []byte{
	0x0a, 0x09, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x69, 0x6f, 0x2e,
	0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x45, 0x0a, 0x09,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x68, 0x61, 0x22, 0x44, 0x0a, 0x04, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x75, 0x6c, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70,
	0x75, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0x82, 0x02, 0x0a, 0x0a, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x70, 0x65,
	0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x52,
	0x04, 0x70, 0x65, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x63,
	0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x22, 0xd6, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e,
	0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x48,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x31, 0x0a, 0x05,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22,
	0xbd, 0x04, 0x0a, 0x0b, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x68, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6b, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x12, 0x3e, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x3d, 0x0a,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x22,
	0x90, 0x02, 0x0a, 0x0f, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x6f, 0x6f, 0x6b, 0x12, 0x3f, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x3c, 0x0a, 0x02, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x02, 0x70, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x22, 0xd5, 0x02, 0x0a, 0x10, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x3f, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e,
	0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73,
	0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e,
	0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e,
	0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x0a, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x3f, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63,
	0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x72, 0x65,
	0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x3d, 0x0a, 0x06, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x03, 0x72, 0x65,
	0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e,
	0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0x68, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x39, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x22, 0x9e, 0x02, 0x0a, 0x05, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x02, 0x70, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x02, 0x70, 0x72, 0x22, 0xe9, 0x02, 0x0a, 0x08, 0x50, 0x75, 0x73, 0x68, 0x48, 0x6f, 0x6f, 0x6b,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72,
	0x65, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x12, 0x3f, 0x0a,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x3d, 0x0a,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x22,
	0x80, 0x01, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e,
	0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x1a, 0x30, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x73, 0x65, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e,
	0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63,
	0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x69, 0x74, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x22, 0xb9, 0x02, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x73, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x02, 0x70, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73,
	0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x48, 0x00, 0x52, 0x02, 0x70, 0x72, 0x12, 0x3f,
	0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x75, 0x73, 0x68, 0x48, 0x6f, 0x6f, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x70, 0x75, 0x73, 0x68, 0x12,
	0x4d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x6f, 0x6f, 0x6b, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45,
	0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x48, 0x6f, 0x6f, 0x6b, 0x48, 0x00, 0x52, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x22, 0x43, 0x0a,
	0x09, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4b, 0x0a, 0x0a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x48, 0x00, 0x52, 0x09, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x0e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22,
	0x32, 0x0a, 0x0d, 0x47, 0x69, 0x74, 0x65, 0x61, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x57, 0x0a, 0x16, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x69, 0x0a, 0x17,
	0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x52, 0x0a, 0x12, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x0d,
	0x41, 0x7a, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x15, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0xe0, 0x05, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x06,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x12, 0x49, 0x0a, 0x06, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e,
	0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x12, 0x46, 0x0a, 0x05, 0x67, 0x69, 0x74, 0x65, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x69, 0x74, 0x65, 0x61, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x67, 0x69, 0x74, 0x65, 0x61, 0x12, 0x62, 0x0a, 0x0f, 0x62, 0x69,
	0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e,
	0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x65,
	0x0a, 0x10, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x74, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63,
	0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x46, 0x0a, 0x05,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x50, 0x61, 0x74, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x68, 0x6f,
	0x6f, 0x6b, 0x22, 0x3d, 0x0a, 0x0c, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x55, 0x72,
	0x6c, 0x22, 0x33, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xb5, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x18, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x03, 0x72,
	0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12,
	0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x68,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e,
	0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x66, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xb4, 0x02, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x48,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e,
	0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22,
	0x78, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6c,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6c, 0x6f,
	0x62, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x62, 0x49, 0x64, 0x22, 0xce, 0x02,
	0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x48, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63,
	0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x9f,
	0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x6d, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0d,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x8d, 0x02, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x12, 0x18, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x03, 0x72, 0x65,
	0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73,
	0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xab, 0x01, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x4d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe9, 0x01,
	0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xab, 0x01, 0x0a, 0x19, 0x46, 0x69,
	0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x4f, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x62, 0x49,
	0x64, 0x22, 0xf0, 0x01, 0x0a, 0x13, 0x49, 0x73, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x18, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x03, 0x72,
	0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x6c, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e,
	0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x2e, 0x0a, 0x14, 0x49, 0x73, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x58, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xd7, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x22, 0x8c, 0x01, 0x0a, 0x06, 0x50, 0x52, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x61, 0x64, 0x64, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x22, 0xa5, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e,
	0x50, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63,
	0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x52, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa1, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e,
	0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x44, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xa9, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x12, 0x18, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x03, 0x72,
	0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12,
	0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa5,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73,
	0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xaf, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf0, 0x01, 0x0a, 0x15, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e,
	0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xa6, 0x01, 0x0a,
	0x16, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73,
	0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x52, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e,
	0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x12, 0x18, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x03, 0x72, 0x65,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x4c,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x73, 0x12, 0x4d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xad, 0x01,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x4f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x52, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x4f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xd9, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x49, 0x6e, 0x50, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xab, 0x01,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x49, 0x6e, 0x50,
	0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e,
	0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x13, 0x47,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x4b, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x62, 0x0a, 0x13, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73,
	0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x72, 0x0a, 0x1b, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x53, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x74, 0x0a, 0x1c, 0x42, 0x69, 0x74, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e,
	0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x60, 0x0a,
	0x12, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0xe0, 0x03, 0x0a, 0x0c, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x4e, 0x0a, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x12, 0x4e, 0x0a, 0x06, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x06, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x12, 0x67, 0x0a, 0x0f, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63,
	0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x74, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x69, 0x74, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x6a, 0x0a, 0x10, 0x62, 0x69, 0x74,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x05, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xa8, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x51, 0x0a, 0x0c, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63,
	0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xd8, 0x01,
	0x0a, 0x0f, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x51, 0x0a,
	0x0c, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x0c, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x6b,
	0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x81, 0x01, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x22, 0x45, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xbe, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e,
	0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xe1, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4c, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x22, 0x50, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x22, 0xd6, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63,
	0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x4d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x6f, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73,
	0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x84, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x82, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x52, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x12, 0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x72, 0x65, 0x66, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x7c, 0x0a, 0x0e, 0x46, 0x69,
	0x6e, 0x64, 0x50, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x02,
	0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x02, 0x70, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6e,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3f, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2a, 0x6f,
	0x0a, 0x0b, 0x47, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0d, 0x0a,
	0x09, 0x42, 0x49, 0x54, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x47, 0x49, 0x54, 0x45, 0x41, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x49, 0x54, 0x48, 0x55,
	0x42, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x10, 0x03, 0x12,
	0x08, 0x0a, 0x04, 0x47, 0x4f, 0x47, 0x53, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41,
	0x53, 0x48, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x4d,
	0x49, 0x54, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x10, 0x07, 0x2a,
	0x87, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4f,
	0x50, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4f, 0x50, 0x45, 0x4e, 0x10,
	0x05, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x09, 0x12, 0x09,
	0x0a, 0x05, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x0a, 0x2a, 0x55, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x4f, 0x52, 0x59, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x59, 0x4d, 0x4c, 0x49, 0x4e,
	0x4b, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x49, 0x54, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x04,
	0x2a, 0xc7, 0x01, 0x0a, 0x12, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x49, 0x54, 0x48, 0x55,
	0x42, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x49,
	0x54, 0x48, 0x55, 0x42, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x49,
	0x53, 0x53, 0x55, 0x45, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42,
	0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x49, 0x54,
	0x48, 0x55, 0x42, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x49, 0x54,
	0x48, 0x55, 0x42, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x07, 0x2a, 0x6e, 0x0a, 0x12, 0x47, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x0e, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x49,
	0x53, 0x53, 0x55, 0x45, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x49, 0x54, 0x4c, 0x41,
	0x42, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x49, 0x54,
	0x4c, 0x41, 0x42, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x49,
	0x54, 0x4c, 0x41, 0x42, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x04, 0x2a, 0xc0, 0x01, 0x0a, 0x1a, 0x42,
	0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x49, 0x54,
	0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x49, 0x53, 0x53,
	0x55, 0x45, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x49, 0x54, 0x42, 0x55, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x49, 0x54, 0x42, 0x55,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x49, 0x54,
	0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x55, 0x4c,
	0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x49, 0x54, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x04, 0x2a, 0x7d, 0x0a,
	0x1b, 0x42, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x20,
	0x42, 0x49, 0x54, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x54, 0x41, 0x47,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x49, 0x54, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x42,
	0x49, 0x54, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f,
	0x50, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0x7f, 0x0a, 0x11,
	0x41, 0x7a, 0x75, 0x72, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x44, 0x10, 0x03, 0x32, 0xc9, 0x1b,
	0x0a, 0x03, 0x53, 0x43, 0x4d, 0x12, 0x7b, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x68, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2f, 0x2e,
	0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x7f, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x34, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x35,
	0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x7b, 0x0a, 0x0c, 0x49, 0x73, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x73, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63,
	0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x73, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x8a, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73,
	0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x49, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3a, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01,
	0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x08, 0x50, 0x75,
	0x73, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73,
	0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x69, 0x6f, 0x2e,
	0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x75, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73,
	0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6f, 0x2e,
	0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x75, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x32, 0x2e,
	0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a,
	0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x52, 0x12, 0x30, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63,
	0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69,
	0x0a, 0x06, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x52, 0x12, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50,
	0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50,
	0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0a, 0x46, 0x69, 0x6e,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e,
	0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7e, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x50,
	0x52, 0x12, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x50,
	0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7b, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73,
	0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x69, 0x6f, 0x2e,
	0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6f, 0x2e,
	0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x78, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x36,
	0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73,
	0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x96, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x4f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63,
	0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x6e, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x49, 0x6e, 0x50, 0x52, 0x12, 0x37, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x49, 0x6e, 0x50, 0x52, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x49, 0x6e, 0x50, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x93, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69,
	0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73,
	0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x78, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x12, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73,
	0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x35, 0x2e,
	0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x35, 0x2e,
	0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x34, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x69, 0x2e, 0x73, 0x63, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x11, 0x50, 0x01, 0x5a, 0x0d, 0x2e,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scm_proto_rawDescOnce sync.Once
	file_scm_proto_rawDescData = file_scm_proto_rawDesc
)

func file_scm_proto_rawDescGZIP() []byte {
	file_scm_proto_rawDescOnce.Do(func() {
		file_scm_proto_rawDescData = protoimpl.X.CompressGZIP(file_scm_proto_rawDescData)
	})
	return file_scm_proto_rawDescData
}

var file_scm_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_scm_proto_msgTypes = make([]protoimpl.MessageInfo, 88)
var file_scm_proto_goTypes = []interface{}{
	(GitProvider)(0),                      // 0: io.harness.product.ci.scm.proto.GitProvider
	(Action)(0),                           // 1: io.harness.product.ci.scm.proto.Action
	(ContentType)(0),                      // 2: io.harness.product.ci.scm.proto.ContentType
	(GithubWebhookEvent)(0),               // 3: io.harness.product.ci.scm.proto.GithubWebhookEvent
	(GitlabWebhookEvent)(0),               // 4: io.harness.product.ci.scm.proto.GitlabWebhookEvent
	(BitbucketCloudWebhookEvent)(0),       // 5: io.harness.product.ci.scm.proto.BitbucketCloudWebhookEvent
	(BitbucketServerWebhookEvent)(0),      // 6: io.harness.product.ci.scm.proto.BitbucketServerWebhookEvent
	(AzureWebhookEvent)(0),                // 7: io.harness.product.ci.scm.proto.AzureWebhookEvent
	(*User)(nil),                          // 8: io.harness.product.ci.scm.proto.User
	(*Reference)(nil),                     // 9: io.harness.product.ci.scm.proto.Reference
	(*Perm)(nil),                          // 10: io.harness.product.ci.scm.proto.Perm
	(*Repository)(nil),                    // 11: io.harness.product.ci.scm.proto.Repository
	(*Signature)(nil),                     // 12: io.harness.product.ci.scm.proto.Signature
	(*Commit)(nil),                        // 13: io.harness.product.ci.scm.proto.Commit
	(*Label)(nil),                         // 14: io.harness.product.ci.scm.proto.Label
	(*PullRequest)(nil),                   // 15: io.harness.product.ci.scm.proto.PullRequest
	(*PullRequestHook)(nil),               // 16: io.harness.product.ci.scm.proto.PullRequestHook
	(*IssueCommentHook)(nil),              // 17: io.harness.product.ci.scm.proto.IssueCommentHook
	(*BranchHook)(nil),                    // 18: io.harness.product.ci.scm.proto.BranchHook
	(*Comment)(nil),                       // 19: io.harness.product.ci.scm.proto.Comment
	(*Issue)(nil),                         // 20: io.harness.product.ci.scm.proto.Issue
	(*PushHook)(nil),                      // 21: io.harness.product.ci.scm.proto.PushHook
	(*Header)(nil),                        // 22: io.harness.product.ci.scm.proto.Header
	(*ParseWebhookRequest)(nil),           // 23: io.harness.product.ci.scm.proto.ParseWebhookRequest
	(*ParseWebhookResponse)(nil),          // 24: io.harness.product.ci.scm.proto.ParseWebhookResponse
	(*GithubApp)(nil),                     // 25: io.harness.product.ci.scm.proto.GithubApp
	(*GithubProvider)(nil),                // 26: io.harness.product.ci.scm.proto.GithubProvider
	(*GitlabProvider)(nil),                // 27: io.harness.product.ci.scm.proto.GitlabProvider
	(*GiteaProvider)(nil),                 // 28: io.harness.product.ci.scm.proto.GiteaProvider
	(*BitbucketCloudProvider)(nil),        // 29: io.harness.product.ci.scm.proto.BitbucketCloudProvider
	(*BitbucketServerProvider)(nil),       // 30: io.harness.product.ci.scm.proto.BitbucketServerProvider
	(*CodecommitProvider)(nil),            // 31: io.harness.product.ci.scm.proto.CodecommitProvider
	(*AzureProvider)(nil),                 // 32: io.harness.product.ci.scm.proto.AzureProvider
	(*Provider)(nil),                      // 33: io.harness.product.ci.scm.proto.Provider
	(*PageResponse)(nil),                  // 34: io.harness.product.ci.scm.proto.PageResponse
	(*PageRequest)(nil),                   // 35: io.harness.product.ci.scm.proto.PageRequest
	(*GetFileRequest)(nil),                // 36: io.harness.product.ci.scm.proto.GetFileRequest
	(*GetBatchFileRequest)(nil),           // 37: io.harness.product.ci.scm.proto.GetBatchFileRequest
	(*GetLatestFileRequest)(nil),          // 38: io.harness.product.ci.scm.proto.GetLatestFileRequest
	(*DeleteFileRequest)(nil),             // 39: io.harness.product.ci.scm.proto.DeleteFileRequest
	(*DeleteFileResponse)(nil),            // 40: io.harness.product.ci.scm.proto.DeleteFileResponse
	(*CreateFileResponse)(nil),            // 41: io.harness.product.ci.scm.proto.CreateFileResponse
	(*UpdateFileResponse)(nil),            // 42: io.harness.product.ci.scm.proto.UpdateFileResponse
	(*FileModifyRequest)(nil),             // 43: io.harness.product.ci.scm.proto.FileModifyRequest
	(*FileContent)(nil),                   // 44: io.harness.product.ci.scm.proto.FileContent
	(*FileBatchContentResponse)(nil),      // 45: io.harness.product.ci.scm.proto.FileBatchContentResponse
	(*FindFilesInBranchRequest)(nil),      // 46: io.harness.product.ci.scm.proto.FindFilesInBranchRequest
	(*FindFilesInBranchResponse)(nil),     // 47: io.harness.product.ci.scm.proto.FindFilesInBranchResponse
	(*FindFilesInCommitRequest)(nil),      // 48: io.harness.product.ci.scm.proto.FindFilesInCommitRequest
	(*FindFilesInCommitResponse)(nil),     // 49: io.harness.product.ci.scm.proto.FindFilesInCommitResponse
	(*FileChange)(nil),                    // 50: io.harness.product.ci.scm.proto.FileChange
	(*IsLatestFileRequest)(nil),           // 51: io.harness.product.ci.scm.proto.IsLatestFileRequest
	(*IsLatestFileResponse)(nil),          // 52: io.harness.product.ci.scm.proto.IsLatestFileResponse
	(*CreatePRRequest)(nil),               // 53: io.harness.product.ci.scm.proto.CreatePRRequest
	(*CreatePRResponse)(nil),              // 54: io.harness.product.ci.scm.proto.CreatePRResponse
	(*FindFilesInPRRequest)(nil),          // 55: io.harness.product.ci.scm.proto.FindFilesInPRRequest
	(*PRFile)(nil),                        // 56: io.harness.product.ci.scm.proto.PRFile
	(*FindFilesInPRResponse)(nil),         // 57: io.harness.product.ci.scm.proto.FindFilesInPRResponse
	(*CreateBranchRequest)(nil),           // 58: io.harness.product.ci.scm.proto.CreateBranchRequest
	(*CreateBranchResponse)(nil),          // 59: io.harness.product.ci.scm.proto.CreateBranchResponse
	(*GetLatestCommitRequest)(nil),        // 60: io.harness.product.ci.scm.proto.GetLatestCommitRequest
	(*GetLatestCommitResponse)(nil),       // 61: io.harness.product.ci.scm.proto.GetLatestCommitResponse
	(*ListBranchesRequest)(nil),           // 62: io.harness.product.ci.scm.proto.ListBranchesRequest
	(*ListBranchesResponse)(nil),          // 63: io.harness.product.ci.scm.proto.ListBranchesResponse
	(*CompareCommitsRequest)(nil),         // 64: io.harness.product.ci.scm.proto.CompareCommitsRequest
	(*CompareCommitsResponse)(nil),        // 65: io.harness.product.ci.scm.proto.CompareCommitsResponse
	(*ListCommitsRequest)(nil),            // 66: io.harness.product.ci.scm.proto.ListCommitsRequest
	(*ListCommitsResponse)(nil),           // 67: io.harness.product.ci.scm.proto.ListCommitsResponse
	(*GetLatestCommitOnFileRequest)(nil),  // 68: io.harness.product.ci.scm.proto.GetLatestCommitOnFileRequest
	(*GetLatestCommitOnFileResponse)(nil), // 69: io.harness.product.ci.scm.proto.GetLatestCommitOnFileResponse
	(*ListCommitsInPRRequest)(nil),        // 70: io.harness.product.ci.scm.proto.ListCommitsInPRRequest
	(*ListCommitsInPRResponse)(nil),       // 71: io.harness.product.ci.scm.proto.ListCommitsInPRResponse
	(*GithubWebhookEvents)(nil),           // 72: io.harness.product.ci.scm.proto.GithubWebhookEvents
	(*GitlabWebhookEvents)(nil),           // 73: io.harness.product.ci.scm.proto.GitlabWebhookEvents
	(*BitbucketCloudWebhookEvents)(nil),   // 74: io.harness.product.ci.scm.proto.BitbucketCloudWebhookEvents
	(*BitbucketServerWebhookEvents)(nil),  // 75: io.harness.product.ci.scm.proto.BitbucketServerWebhookEvents
	(*AzureWebhookEvents)(nil),            // 76: io.harness.product.ci.scm.proto.AzureWebhookEvents
	(*NativeEvents)(nil),                  // 77: io.harness.product.ci.scm.proto.NativeEvents
	(*CreateWebhookRequest)(nil),          // 78: io.harness.product.ci.scm.proto.CreateWebhookRequest
	(*WebhookResponse)(nil),               // 79: io.harness.product.ci.scm.proto.WebhookResponse
	(*CreateWebhookResponse)(nil),         // 80: io.harness.product.ci.scm.proto.CreateWebhookResponse
	(*DeleteWebhookRequest)(nil),          // 81: io.harness.product.ci.scm.proto.DeleteWebhookRequest
	(*DeleteWebhookResponse)(nil),         // 82: io.harness.product.ci.scm.proto.DeleteWebhookResponse
	(*ListWebhooksRequest)(nil),           // 83: io.harness.product.ci.scm.proto.ListWebhooksRequest
	(*ListWebhooksResponse)(nil),          // 84: io.harness.product.ci.scm.proto.ListWebhooksResponse
	(*GetAuthenticatedUserRequest)(nil),   // 85: io.harness.product.ci.scm.proto.GetAuthenticatedUserRequest
	(*GetAuthenticatedUserResponse)(nil),  // 86: io.harness.product.ci.scm.proto.GetAuthenticatedUserResponse
	(*GetUserReposRequest)(nil),           // 87: io.harness.product.ci.scm.proto.GetUserReposRequest
	(*GetUserReposResponse)(nil),          // 88: io.harness.product.ci.scm.proto.GetUserReposResponse
	(*GetUserRepoRequest)(nil),            // 89: io.harness.product.ci.scm.proto.GetUserRepoRequest
	(*GetUserRepoResponse)(nil),           // 90: io.harness.product.ci.scm.proto.GetUserRepoResponse
	(*FindPRRequest)(nil),                 // 91: io.harness.product.ci.scm.proto.FindPRRequest
	(*FindCommitRequest)(nil),             // 92: io.harness.product.ci.scm.proto.FindCommitRequest
	(*FindPRResponse)(nil),                // 93: io.harness.product.ci.scm.proto.FindPRResponse
	(*FindCommitResponse)(nil),            // 94: io.harness.product.ci.scm.proto.FindCommitResponse
	(*Header_Pair)(nil),                   // 95: io.harness.product.ci.scm.proto.Header.Pair
}
var file_scm_proto_depIdxs = []int32{
	10,  // 0: io.harness.product.ci.scm.proto.Repository.perm:type_name -> io.harness.product.ci.scm.proto.Perm
	12,  // 1: io.harness.product.ci.scm.proto.Commit.author:type_name -> io.harness.product.ci.scm.proto.Signature
	12,  // 2: io.harness.product.ci.scm.proto.Commit.committer:type_name -> io.harness.product.ci.scm.proto.Signature
	9,   // 3: io.harness.product.ci.scm.proto.PullRequest.base:type_name -> io.harness.product.ci.scm.proto.Reference
	9,   // 4: io.harness.product.ci.scm.proto.PullRequest.head:type_name -> io.harness.product.ci.scm.proto.Reference
	8,   // 5: io.harness.product.ci.scm.proto.PullRequest.author:type_name -> io.harness.product.ci.scm.proto.User
	14,  // 6: io.harness.product.ci.scm.proto.PullRequest.labels:type_name -> io.harness.product.ci.scm.proto.Label
	13,  // 7: io.harness.product.ci.scm.proto.PullRequest.commits:type_name -> io.harness.product.ci.scm.proto.Commit
	1,   // 8: io.harness.product.ci.scm.proto.PullRequestHook.action:type_name -> io.harness.product.ci.scm.proto.Action
	11,  // 9: io.harness.product.ci.scm.proto.PullRequestHook.repo:type_name -> io.harness.product.ci.scm.proto.Repository
	15,  // 10: io.harness.product.ci.scm.proto.PullRequestHook.pr:type_name -> io.harness.product.ci.scm.proto.PullRequest
	8,   // 11: io.harness.product.ci.scm.proto.PullRequestHook.sender:type_name -> io.harness.product.ci.scm.proto.User
	1,   // 12: io.harness.product.ci.scm.proto.IssueCommentHook.action:type_name -> io.harness.product.ci.scm.proto.Action
	11,  // 13: io.harness.product.ci.scm.proto.IssueCommentHook.repo:type_name -> io.harness.product.ci.scm.proto.Repository
	20,  // 14: io.harness.product.ci.scm.proto.IssueCommentHook.issue:type_name -> io.harness.product.ci.scm.proto.Issue
	8,   // 15: io.harness.product.ci.scm.proto.IssueCommentHook.sender:type_name -> io.harness.product.ci.scm.proto.User
	19,  // 16: io.harness.product.ci.scm.proto.IssueCommentHook.comment:type_name -> io.harness.product.ci.scm.proto.Comment
	1,   // 17: io.harness.product.ci.scm.proto.BranchHook.action:type_name -> io.harness.product.ci.scm.proto.Action
	11,  // 18: io.harness.product.ci.scm.proto.BranchHook.repo:type_name -> io.harness.product.ci.scm.proto.Repository
	8,   // 19: io.harness.product.ci.scm.proto.BranchHook.sender:type_name -> io.harness.product.ci.scm.proto.User
	9,   // 20: io.harness.product.ci.scm.proto.BranchHook.ref:type_name -> io.harness.product.ci.scm.proto.Reference
	8,   // 21: io.harness.product.ci.scm.proto.Comment.user:type_name -> io.harness.product.ci.scm.proto.User
	8,   // 22: io.harness.product.ci.scm.proto.Issue.user:type_name -> io.harness.product.ci.scm.proto.User
	15,  // 23: io.harness.product.ci.scm.proto.Issue.pr:type_name -> io.harness.product.ci.scm.proto.PullRequest
	11,  // 24: io.harness.product.ci.scm.proto.PushHook.repo:type_name -> io.harness.product.ci.scm.proto.Repository
	13,  // 25: io.harness.product.ci.scm.proto.PushHook.commit:type_name -> io.harness.product.ci.scm.proto.Commit
	8,   // 26: io.harness.product.ci.scm.proto.PushHook.sender:type_name -> io.harness.product.ci.scm.proto.User
	13,  // 27: io.harness.product.ci.scm.proto.PushHook.commits:type_name -> io.harness.product.ci.scm.proto.Commit
	95,  // 28: io.harness.product.ci.scm.proto.Header.fields:type_name -> io.harness.product.ci.scm.proto.Header.Pair
	22,  // 29: io.harness.product.ci.scm.proto.ParseWebhookRequest.header:type_name -> io.harness.product.ci.scm.proto.Header
	0,   // 30: io.harness.product.ci.scm.proto.ParseWebhookRequest.provider:type_name -> io.harness.product.ci.scm.proto.GitProvider
	16,  // 31: io.harness.product.ci.scm.proto.ParseWebhookResponse.pr:type_name -> io.harness.product.ci.scm.proto.PullRequestHook
	21,  // 32: io.harness.product.ci.scm.proto.ParseWebhookResponse.push:type_name -> io.harness.product.ci.scm.proto.PushHook
	17,  // 33: io.harness.product.ci.scm.proto.ParseWebhookResponse.comment:type_name -> io.harness.product.ci.scm.proto.IssueCommentHook
	18,  // 34: io.harness.product.ci.scm.proto.ParseWebhookResponse.branch:type_name -> io.harness.product.ci.scm.proto.BranchHook
	25,  // 35: io.harness.product.ci.scm.proto.GithubProvider.github_app:type_name -> io.harness.product.ci.scm.proto.GithubApp
	26,  // 36: io.harness.product.ci.scm.proto.Provider.github:type_name -> io.harness.product.ci.scm.proto.GithubProvider
	27,  // 37: io.harness.product.ci.scm.proto.Provider.gitlab:type_name -> io.harness.product.ci.scm.proto.GitlabProvider
	28,  // 38: io.harness.product.ci.scm.proto.Provider.gitea:type_name -> io.harness.product.ci.scm.proto.GiteaProvider
	29,  // 39: io.harness.product.ci.scm.proto.Provider.bitbucket_cloud:type_name -> io.harness.product.ci.scm.proto.BitbucketCloudProvider
	30,  // 40: io.harness.product.ci.scm.proto.Provider.bitbucket_server:type_name -> io.harness.product.ci.scm.proto.BitbucketServerProvider
	31,  // 41: io.harness.product.ci.scm.proto.Provider.codecommit:type_name -> io.harness.product.ci.scm.proto.CodecommitProvider
	32,  // 42: io.harness.product.ci.scm.proto.Provider.azure:type_name -> io.harness.product.ci.scm.proto.AzureProvider
	33,  // 43: io.harness.product.ci.scm.proto.GetFileRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	36,  // 44: io.harness.product.ci.scm.proto.GetBatchFileRequest.findRequest:type_name -> io.harness.product.ci.scm.proto.GetFileRequest
	33,  // 45: io.harness.product.ci.scm.proto.GetLatestFileRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	12,  // 46: io.harness.product.ci.scm.proto.DeleteFileRequest.signature:type_name -> io.harness.product.ci.scm.proto.Signature
	33,  // 47: io.harness.product.ci.scm.proto.DeleteFileRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	12,  // 48: io.harness.product.ci.scm.proto.FileModifyRequest.signature:type_name -> io.harness.product.ci.scm.proto.Signature
	33,  // 49: io.harness.product.ci.scm.proto.FileModifyRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	44,  // 50: io.harness.product.ci.scm.proto.FileBatchContentResponse.file_contents:type_name -> io.harness.product.ci.scm.proto.FileContent
	35,  // 51: io.harness.product.ci.scm.proto.FindFilesInBranchRequest.pagination:type_name -> io.harness.product.ci.scm.proto.PageRequest
	33,  // 52: io.harness.product.ci.scm.proto.FindFilesInBranchRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	50,  // 53: io.harness.product.ci.scm.proto.FindFilesInBranchResponse.file:type_name -> io.harness.product.ci.scm.proto.FileChange
	34,  // 54: io.harness.product.ci.scm.proto.FindFilesInBranchResponse.pagination:type_name -> io.harness.product.ci.scm.proto.PageResponse
	35,  // 55: io.harness.product.ci.scm.proto.FindFilesInCommitRequest.pagination:type_name -> io.harness.product.ci.scm.proto.PageRequest
	33,  // 56: io.harness.product.ci.scm.proto.FindFilesInCommitRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	50,  // 57: io.harness.product.ci.scm.proto.FindFilesInCommitResponse.file:type_name -> io.harness.product.ci.scm.proto.FileChange
	34,  // 58: io.harness.product.ci.scm.proto.FindFilesInCommitResponse.pagination:type_name -> io.harness.product.ci.scm.proto.PageResponse
	2,   // 59: io.harness.product.ci.scm.proto.FileChange.content_type:type_name -> io.harness.product.ci.scm.proto.ContentType
	33,  // 60: io.harness.product.ci.scm.proto.IsLatestFileRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	33,  // 61: io.harness.product.ci.scm.proto.CreatePRRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	35,  // 62: io.harness.product.ci.scm.proto.FindFilesInPRRequest.pagination:type_name -> io.harness.product.ci.scm.proto.PageRequest
	33,  // 63: io.harness.product.ci.scm.proto.FindFilesInPRRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	56,  // 64: io.harness.product.ci.scm.proto.FindFilesInPRResponse.files:type_name -> io.harness.product.ci.scm.proto.PRFile
	34,  // 65: io.harness.product.ci.scm.proto.FindFilesInPRResponse.pagination:type_name -> io.harness.product.ci.scm.proto.PageResponse
	33,  // 66: io.harness.product.ci.scm.proto.CreateBranchRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	33,  // 67: io.harness.product.ci.scm.proto.GetLatestCommitRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	13,  // 68: io.harness.product.ci.scm.proto.GetLatestCommitResponse.commit:type_name -> io.harness.product.ci.scm.proto.Commit
	35,  // 69: io.harness.product.ci.scm.proto.ListBranchesRequest.pagination:type_name -> io.harness.product.ci.scm.proto.PageRequest
	33,  // 70: io.harness.product.ci.scm.proto.ListBranchesRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	34,  // 71: io.harness.product.ci.scm.proto.ListBranchesResponse.pagination:type_name -> io.harness.product.ci.scm.proto.PageResponse
	35,  // 72: io.harness.product.ci.scm.proto.CompareCommitsRequest.pagination:type_name -> io.harness.product.ci.scm.proto.PageRequest
	33,  // 73: io.harness.product.ci.scm.proto.CompareCommitsRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	56,  // 74: io.harness.product.ci.scm.proto.CompareCommitsResponse.files:type_name -> io.harness.product.ci.scm.proto.PRFile
	34,  // 75: io.harness.product.ci.scm.proto.CompareCommitsResponse.pagination:type_name -> io.harness.product.ci.scm.proto.PageResponse
	35,  // 76: io.harness.product.ci.scm.proto.ListCommitsRequest.pagination:type_name -> io.harness.product.ci.scm.proto.PageRequest
	33,  // 77: io.harness.product.ci.scm.proto.ListCommitsRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	34,  // 78: io.harness.product.ci.scm.proto.ListCommitsResponse.pagination:type_name -> io.harness.product.ci.scm.proto.PageResponse
	33,  // 79: io.harness.product.ci.scm.proto.GetLatestCommitOnFileRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	35,  // 80: io.harness.product.ci.scm.proto.ListCommitsInPRRequest.pagination:type_name -> io.harness.product.ci.scm.proto.PageRequest
	33,  // 81: io.harness.product.ci.scm.proto.ListCommitsInPRRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	13,  // 82: io.harness.product.ci.scm.proto.ListCommitsInPRResponse.commits:type_name -> io.harness.product.ci.scm.proto.Commit
	34,  // 83: io.harness.product.ci.scm.proto.ListCommitsInPRResponse.pagination:type_name -> io.harness.product.ci.scm.proto.PageResponse
	3,   // 84: io.harness.product.ci.scm.proto.GithubWebhookEvents.events:type_name -> io.harness.product.ci.scm.proto.GithubWebhookEvent
	4,   // 85: io.harness.product.ci.scm.proto.GitlabWebhookEvents.events:type_name -> io.harness.product.ci.scm.proto.GitlabWebhookEvent
	5,   // 86: io.harness.product.ci.scm.proto.BitbucketCloudWebhookEvents.events:type_name -> io.harness.product.ci.scm.proto.BitbucketCloudWebhookEvent
	6,   // 87: io.harness.product.ci.scm.proto.BitbucketServerWebhookEvents.events:type_name -> io.harness.product.ci.scm.proto.BitbucketServerWebhookEvent
	7,   // 88: io.harness.product.ci.scm.proto.AzureWebhookEvents.events:type_name -> io.harness.product.ci.scm.proto.AzureWebhookEvent
	72,  // 89: io.harness.product.ci.scm.proto.NativeEvents.github:type_name -> io.harness.product.ci.scm.proto.GithubWebhookEvents
	73,  // 90: io.harness.product.ci.scm.proto.NativeEvents.gitlab:type_name -> io.harness.product.ci.scm.proto.GitlabWebhookEvents
	74,  // 91: io.harness.product.ci.scm.proto.NativeEvents.bitbucket_cloud:type_name -> io.harness.product.ci.scm.proto.BitbucketCloudWebhookEvents
	75,  // 92: io.harness.product.ci.scm.proto.NativeEvents.bitbucket_server:type_name -> io.harness.product.ci.scm.proto.BitbucketServerWebhookEvents
	76,  // 93: io.harness.product.ci.scm.proto.NativeEvents.azure:type_name -> io.harness.product.ci.scm.proto.AzureWebhookEvents
	77,  // 94: io.harness.product.ci.scm.proto.CreateWebhookRequest.nativeEvents:type_name -> io.harness.product.ci.scm.proto.NativeEvents
	33,  // 95: io.harness.product.ci.scm.proto.CreateWebhookRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	77,  // 96: io.harness.product.ci.scm.proto.WebhookResponse.nativeEvents:type_name -> io.harness.product.ci.scm.proto.NativeEvents
	79,  // 97: io.harness.product.ci.scm.proto.CreateWebhookResponse.webhook:type_name -> io.harness.product.ci.scm.proto.WebhookResponse
	33,  // 98: io.harness.product.ci.scm.proto.DeleteWebhookRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	35,  // 99: io.harness.product.ci.scm.proto.ListWebhooksRequest.pagination:type_name -> io.harness.product.ci.scm.proto.PageRequest
	33,  // 100: io.harness.product.ci.scm.proto.ListWebhooksRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	79,  // 101: io.harness.product.ci.scm.proto.ListWebhooksResponse.webhooks:type_name -> io.harness.product.ci.scm.proto.WebhookResponse
	34,  // 102: io.harness.product.ci.scm.proto.ListWebhooksResponse.pagination:type_name -> io.harness.product.ci.scm.proto.PageResponse
	33,  // 103: io.harness.product.ci.scm.proto.GetAuthenticatedUserRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	35,  // 104: io.harness.product.ci.scm.proto.GetUserReposRequest.pagination:type_name -> io.harness.product.ci.scm.proto.PageRequest
	33,  // 105: io.harness.product.ci.scm.proto.GetUserReposRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	11,  // 106: io.harness.product.ci.scm.proto.GetUserReposResponse.repos:type_name -> io.harness.product.ci.scm.proto.Repository
	34,  // 107: io.harness.product.ci.scm.proto.GetUserReposResponse.pagination:type_name -> io.harness.product.ci.scm.proto.PageResponse
	33,  // 108: io.harness.product.ci.scm.proto.GetUserRepoRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	11,  // 109: io.harness.product.ci.scm.proto.GetUserRepoResponse.repo:type_name -> io.harness.product.ci.scm.proto.Repository
	33,  // 110: io.harness.product.ci.scm.proto.FindPRRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	33,  // 111: io.harness.product.ci.scm.proto.FindCommitRequest.provider:type_name -> io.harness.product.ci.scm.proto.Provider
	15,  // 112: io.harness.product.ci.scm.proto.FindPRResponse.pr:type_name -> io.harness.product.ci.scm.proto.PullRequest
	13,  // 113: io.harness.product.ci.scm.proto.FindCommitResponse.commit:type_name -> io.harness.product.ci.scm.proto.Commit
	23,  // 114: io.harness.product.ci.scm.proto.SCM.ParseWebhook:input_type -> io.harness.product.ci.scm.proto.ParseWebhookRequest
	36,  // 115: io.harness.product.ci.scm.proto.SCM.GetFile:input_type -> io.harness.product.ci.scm.proto.GetFileRequest
	37,  // 116: io.harness.product.ci.scm.proto.SCM.GetBatchFile:input_type -> io.harness.product.ci.scm.proto.GetBatchFileRequest
	38,  // 117: io.harness.product.ci.scm.proto.SCM.GetLatestFile:input_type -> io.harness.product.ci.scm.proto.GetLatestFileRequest
	51,  // 118: io.harness.product.ci.scm.proto.SCM.IsLatestFile:input_type -> io.harness.product.ci.scm.proto.IsLatestFileRequest
	46,  // 119: io.harness.product.ci.scm.proto.SCM.FindFilesInBranch:input_type -> io.harness.product.ci.scm.proto.FindFilesInBranchRequest
	48,  // 120: io.harness.product.ci.scm.proto.SCM.FindFilesInCommit:input_type -> io.harness.product.ci.scm.proto.FindFilesInCommitRequest
	43,  // 121: io.harness.product.ci.scm.proto.SCM.PushFile:input_type -> io.harness.product.ci.scm.proto.FileModifyRequest
	43,  // 122: io.harness.product.ci.scm.proto.SCM.CreateFile:input_type -> io.harness.product.ci.scm.proto.FileModifyRequest
	39,  // 123: io.harness.product.ci.scm.proto.SCM.DeleteFile:input_type -> io.harness.product.ci.scm.proto.DeleteFileRequest
	43,  // 124: io.harness.product.ci.scm.proto.SCM.UpdateFile:input_type -> io.harness.product.ci.scm.proto.FileModifyRequest
	53,  // 125: io.harness.product.ci.scm.proto.SCM.CreatePR:input_type -> io.harness.product.ci.scm.proto.CreatePRRequest
	91,  // 126: io.harness.product.ci.scm.proto.SCM.FindPR:input_type -> io.harness.product.ci.scm.proto.FindPRRequest
	92,  // 127: io.harness.product.ci.scm.proto.SCM.FindCommit:input_type -> io.harness.product.ci.scm.proto.FindCommitRequest
	55,  // 128: io.harness.product.ci.scm.proto.SCM.FindFilesInPR:input_type -> io.harness.product.ci.scm.proto.FindFilesInPRRequest
	58,  // 129: io.harness.product.ci.scm.proto.SCM.CreateBranch:input_type -> io.harness.product.ci.scm.proto.CreateBranchRequest
	60,  // 130: io.harness.product.ci.scm.proto.SCM.GetLatestCommit:input_type -> io.harness.product.ci.scm.proto.GetLatestCommitRequest
	62,  // 131: io.harness.product.ci.scm.proto.SCM.ListBranches:input_type -> io.harness.product.ci.scm.proto.ListBranchesRequest
	66,  // 132: io.harness.product.ci.scm.proto.SCM.ListCommits:input_type -> io.harness.product.ci.scm.proto.ListCommitsRequest
	64,  // 133: io.harness.product.ci.scm.proto.SCM.CompareCommits:input_type -> io.harness.product.ci.scm.proto.CompareCommitsRequest
	68,  // 134: io.harness.product.ci.scm.proto.SCM.GetLatestCommitOnFile:input_type -> io.harness.product.ci.scm.proto.GetLatestCommitOnFileRequest
	70,  // 135: io.harness.product.ci.scm.proto.SCM.ListCommitsInPR:input_type -> io.harness.product.ci.scm.proto.ListCommitsInPRRequest
	85,  // 136: io.harness.product.ci.scm.proto.SCM.GetAuthenticatedUser:input_type -> io.harness.product.ci.scm.proto.GetAuthenticatedUserRequest
	87,  // 137: io.harness.product.ci.scm.proto.SCM.GetUserRepos:input_type -> io.harness.product.ci.scm.proto.GetUserReposRequest
	89,  // 138: io.harness.product.ci.scm.proto.SCM.GetUserRepo:input_type -> io.harness.product.ci.scm.proto.GetUserRepoRequest
	78,  // 139: io.harness.product.ci.scm.proto.SCM.CreateWebhook:input_type -> io.harness.product.ci.scm.proto.CreateWebhookRequest
	81,  // 140: io.harness.product.ci.scm.proto.SCM.DeleteWebhook:input_type -> io.harness.product.ci.scm.proto.DeleteWebhookRequest
	83,  // 141: io.harness.product.ci.scm.proto.SCM.ListWebhooks:input_type -> io.harness.product.ci.scm.proto.ListWebhooksRequest
	24,  // 142: io.harness.product.ci.scm.proto.SCM.ParseWebhook:output_type -> io.harness.product.ci.scm.proto.ParseWebhookResponse
	44,  // 143: io.harness.product.ci.scm.proto.SCM.GetFile:output_type -> io.harness.product.ci.scm.proto.FileContent
	45,  // 144: io.harness.product.ci.scm.proto.SCM.GetBatchFile:output_type -> io.harness.product.ci.scm.proto.FileBatchContentResponse
	44,  // 145: io.harness.product.ci.scm.proto.SCM.GetLatestFile:output_type -> io.harness.product.ci.scm.proto.FileContent
	52,  // 146: io.harness.product.ci.scm.proto.SCM.IsLatestFile:output_type -> io.harness.product.ci.scm.proto.IsLatestFileResponse
	47,  // 147: io.harness.product.ci.scm.proto.SCM.FindFilesInBranch:output_type -> io.harness.product.ci.scm.proto.FindFilesInBranchResponse
	49,  // 148: io.harness.product.ci.scm.proto.SCM.FindFilesInCommit:output_type -> io.harness.product.ci.scm.proto.FindFilesInCommitResponse
	44,  // 149: io.harness.product.ci.scm.proto.SCM.PushFile:output_type -> io.harness.product.ci.scm.proto.FileContent
	41,  // 150: io.harness.product.ci.scm.proto.SCM.CreateFile:output_type -> io.harness.product.ci.scm.proto.CreateFileResponse
	40,  // 151: io.harness.product.ci.scm.proto.SCM.DeleteFile:output_type -> io.harness.product.ci.scm.proto.DeleteFileResponse
	42,  // 152: io.harness.product.ci.scm.proto.SCM.UpdateFile:output_type -> io.harness.product.ci.scm.proto.UpdateFileResponse
	54,  // 153: io.harness.product.ci.scm.proto.SCM.CreatePR:output_type -> io.harness.product.ci.scm.proto.CreatePRResponse
	93,  // 154: io.harness.product.ci.scm.proto.SCM.FindPR:output_type -> io.harness.product.ci.scm.proto.FindPRResponse
	94,  // 155: io.harness.product.ci.scm.proto.SCM.FindCommit:output_type -> io.harness.product.ci.scm.proto.FindCommitResponse
	57,  // 156: io.harness.product.ci.scm.proto.SCM.FindFilesInPR:output_type -> io.harness.product.ci.scm.proto.FindFilesInPRResponse
	59,  // 157: io.harness.product.ci.scm.proto.SCM.CreateBranch:output_type -> io.harness.product.ci.scm.proto.CreateBranchResponse
	61,  // 158: io.harness.product.ci.scm.proto.SCM.GetLatestCommit:output_type -> io.harness.product.ci.scm.proto.GetLatestCommitResponse
	63,  // 159: io.harness.product.ci.scm.proto.SCM.ListBranches:output_type -> io.harness.product.ci.scm.proto.ListBranchesResponse
	67,  // 160: io.harness.product.ci.scm.proto.SCM.ListCommits:output_type -> io.harness.product.ci.scm.proto.ListCommitsResponse
	65,  // 161: io.harness.product.ci.scm.proto.SCM.CompareCommits:output_type -> io.harness.product.ci.scm.proto.CompareCommitsResponse
	69,  // 162: io.harness.product.ci.scm.proto.SCM.GetLatestCommitOnFile:output_type -> io.harness.product.ci.scm.proto.GetLatestCommitOnFileResponse
	71,  // 163: io.harness.product.ci.scm.proto.SCM.ListCommitsInPR:output_type -> io.harness.product.ci.scm.proto.ListCommitsInPRResponse
	86,  // 164: io.harness.product.ci.scm.proto.SCM.GetAuthenticatedUser:output_type -> io.harness.product.ci.scm.proto.GetAuthenticatedUserResponse
	88,  // 165: io.harness.product.ci.scm.proto.SCM.GetUserRepos:output_type -> io.harness.product.ci.scm.proto.GetUserReposResponse
	90,  // 166: io.harness.product.ci.scm.proto.SCM.GetUserRepo:output_type -> io.harness.product.ci.scm.proto.GetUserRepoResponse
	80,  // 167: io.harness.product.ci.scm.proto.SCM.CreateWebhook:output_type -> io.harness.product.ci.scm.proto.CreateWebhookResponse
	82,  // 168: io.harness.product.ci.scm.proto.SCM.DeleteWebhook:output_type -> io.harness.product.ci.scm.proto.DeleteWebhookResponse
	84,  // 169: io.harness.product.ci.scm.proto.SCM.ListWebhooks:output_type -> io.harness.product.ci.scm.proto.ListWebhooksResponse
	142, // [142:170] is the sub-list for method output_type
	114, // [114:142] is the sub-list for method input_type
	114, // [114:114] is the sub-list for extension type_name
	114, // [114:114] is the sub-list for extension extendee
	0,   // [0:114] is the sub-list for field type_name
}

func init() { file_scm_proto_init() }
func file_scm_proto_init() {
	if File_scm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Perm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullRequestHook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCommentHook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchHook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Issue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushHook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseWebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseWebhookResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GithubApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GithubProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitlabProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiteaProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitbucketCloudProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitbucketServerProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodecommitProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBatchFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileModifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileBatchContentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFilesInBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFilesInBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFilesInCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFilesInCommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsLatestFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsLatestFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFilesInPRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PRFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindFilesInPRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestCommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBranchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBranchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareCommitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareCommitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestCommitOnFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestCommitOnFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitsInPRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommitsInPRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GithubWebhookEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitlabWebhookEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitbucketCloudWebhookEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitbucketServerWebhookEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureWebhookEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWebhookResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWebhookResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWebhooksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWebhooksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthenticatedUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthenticatedUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserReposRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserReposResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindPRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindCommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scm_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header_Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_scm_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ParseWebhookResponse_Pr)(nil),
		(*ParseWebhookResponse_Push)(nil),
		(*ParseWebhookResponse_Comment)(nil),
		(*ParseWebhookResponse_Branch)(nil),
	}
	file_scm_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*GithubProvider_AccessToken)(nil),
		(*GithubProvider_GithubApp)(nil),
	}
	file_scm_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*GitlabProvider_AccessToken)(nil),
		(*GitlabProvider_PersonalToken)(nil),
	}
	file_scm_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*Provider_Github)(nil),
		(*Provider_Gitlab)(nil),
		(*Provider_Gitea)(nil),
		(*Provider_BitbucketCloud)(nil),
		(*Provider_BitbucketServer)(nil),
		(*Provider_Codecommit)(nil),
		(*Provider_Azure)(nil),
	}
	file_scm_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*GetFileRequest_Branch)(nil),
		(*GetFileRequest_Ref)(nil),
	}
	file_scm_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*FindFilesInBranchRequest_Branch)(nil),
		(*FindFilesInBranchRequest_Ref)(nil),
	}
	file_scm_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*IsLatestFileRequest_Branch)(nil),
		(*IsLatestFileRequest_Ref)(nil),
	}
	file_scm_proto_msgTypes[52].OneofWrappers = []interface{}{
		(*GetLatestCommitRequest_Branch)(nil),
		(*GetLatestCommitRequest_Ref)(nil),
	}
	file_scm_proto_msgTypes[58].OneofWrappers = []interface{}{
		(*ListCommitsRequest_Branch)(nil),
		(*ListCommitsRequest_Ref)(nil),
	}
	file_scm_proto_msgTypes[69].OneofWrappers = []interface{}{
		(*NativeEvents_Github)(nil),
		(*NativeEvents_Gitlab)(nil),
		(*NativeEvents_BitbucketCloud)(nil),
		(*NativeEvents_BitbucketServer)(nil),
		(*NativeEvents_Azure)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scm_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   88,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scm_proto_goTypes,
		DependencyIndexes: file_scm_proto_depIdxs,
		EnumInfos:         file_scm_proto_enumTypes,
		MessageInfos:      file_scm_proto_msgTypes,
	}.Build()
	File_scm_proto = out.File
	file_scm_proto_rawDesc = nil
	file_scm_proto_goTypes = nil
	file_scm_proto_depIdxs = nil
}
